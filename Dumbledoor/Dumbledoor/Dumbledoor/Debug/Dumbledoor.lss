
Dumbledoor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  0000095c  000009f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000095c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  0080020e  0080020e  00000afe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000afe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fa8  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd4  00000000  00000000  00002cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f42  00000000  00000000  00003984  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000424  00000000  00000000  000048c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000704  00000000  00000000  00004cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001092  00000000  00000000  000053f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00006482  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_18>
  4c:	0c 94 10 04 	jmp	0x820	; 0x820 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 39       	cpi	r26, 0x98	; 152
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9a 02 	call	0x534	; 0x534 <main>
  9e:	0c 94 ac 04 	jmp	0x958	; 0x958 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
}

/*--------------------------------------------------------------------*/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name ^ (1<<pin_num); // Toggle bit (xor)
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_pullup>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_pullup+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_pullup+0xa>
  d0:	92 2f       	mov	r25, r18
  d2:	90 95       	com	r25
  d4:	89 23       	and	r24, r25
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	28 2b       	or	r18, r24
  de:	21 83       	std	Z+1, r18	; 0x01
  e0:	08 95       	ret

000000e2 <GPIO_write_low>:
  e2:	fc 01       	movw	r30, r24
  e4:	90 81       	ld	r25, Z
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GPIO_write_low+0xe>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <GPIO_write_low+0xa>
  f4:	20 95       	com	r18
  f6:	29 23       	and	r18, r25
  f8:	20 83       	st	Z, r18
  fa:	08 95       	ret

000000fc <GPIO_write_high>:
  fc:	fc 01       	movw	r30, r24
  fe:	40 81       	ld	r20, Z
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <GPIO_write_high+0xe>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <GPIO_write_high+0xa>
 10e:	24 2b       	or	r18, r20
 110:	20 83       	st	Z, r18
 112:	08 95       	ret

00000114 <GPIO_read>:
	/* uint8_t result;
	
	result = *reg_name>>pin_num;
	return result; */
	
	if(bit_is_clear(*reg_name, pin_num)) {
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_read+0xc>
 11c:	95 95       	asr	r25
 11e:	87 95       	ror	r24
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_read+0x8>
		return 0;
	}else{
		return 1;
	}
}
 124:	81 70       	andi	r24, 0x01	; 1
 126:	08 95       	ret

00000128 <keypad_init>:
uint8_t columns[3] = {CN0,CN1,CN2};

/* Function definitions ----------------------------------------------*/
void keypad_init() {
	//Set all columns to output
	GPIO_config_output(&DDRC, CN0);
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	87 e2       	ldi	r24, 0x27	; 39
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC, CN1);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	87 e2       	ldi	r24, 0x27	; 39
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRC, CN2);
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	87 e2       	ldi	r24, 0x27	; 39
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	//Set all columns to high
	GPIO_write_high(&PORTC, CN0);
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	88 e2       	ldi	r24, 0x28	; 40
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	GPIO_write_high(&PORTC, CN1);
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	88 e2       	ldi	r24, 0x28	; 40
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	GPIO_write_high(&PORTC, CN2);
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	88 e2       	ldi	r24, 0x28	; 40
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	
	//Set all rows to input with pull-up resistor
	GPIO_config_input_pullup(&DDRC, RN0);
 164:	66 e0       	ldi	r22, 0x06	; 6
 166:	87 e2       	ldi	r24, 0x27	; 39
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
	GPIO_config_input_pullup(&DDRC, RN1);
 16e:	65 e0       	ldi	r22, 0x05	; 5
 170:	87 e2       	ldi	r24, 0x27	; 39
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
	GPIO_config_input_pullup(&DDRC, RN2);
 178:	64 e0       	ldi	r22, 0x04	; 4
 17a:	87 e2       	ldi	r24, 0x27	; 39
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
	GPIO_config_input_pullup(&DDRC, RN3);
 182:	63 e0       	ldi	r22, 0x03	; 3
 184:	87 e2       	ldi	r24, 0x27	; 39
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
 18c:	08 95       	ret

0000018e <keypad_scan>:
}

/*--------------------------------------------------------------------*/
uint8_t keypad_scan() {
 18e:	7f 92       	push	r7
 190:	8f 92       	push	r8
 192:	9f 92       	push	r9
 194:	af 92       	push	r10
 196:	bf 92       	push	r11
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	0f 2e       	mov	r0, r31
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	ef 2e       	mov	r14, r31
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
 1b0:	ff 2e       	mov	r15, r31
 1b2:	f0 2d       	mov	r31, r0
 1b4:	0f 2e       	mov	r0, r31
 1b6:	f7 e0       	ldi	r31, 0x07	; 7
 1b8:	cf 2e       	mov	r12, r31
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	df 2e       	mov	r13, r31
 1be:	f0 2d       	mov	r31, r0
 1c0:	0f 2e       	mov	r0, r31
 1c2:	f3 e0       	ldi	r31, 0x03	; 3
 1c4:	af 2e       	mov	r10, r31
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	bf 2e       	mov	r11, r31
 1ca:	f0 2d       	mov	r31, r0
	static uint8_t isKeyPressed = 0;
	uint8_t rowN = -1;          // Row Number
	uint8_t colN = -1;          // Column Number
	char pKey = ' ';           // Pressed Key
 1cc:	68 94       	set
 1ce:	77 24       	eor	r7, r7
 1d0:	75 f8       	bld	r7, 5
 1d2:	07 e0       	ldi	r16, 0x07	; 7
 1d4:	11 e0       	ldi	r17, 0x01	; 1
	
	for(uint8_t i = 0; i<3; i++)
	{
		
		//Set all columns to high
		GPIO_write_high(&PORTC, CN0);
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
		GPIO_write_high(&PORTC, CN1);
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	88 e2       	ldi	r24, 0x28	; 40
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
		GPIO_write_high(&PORTC, CN2);
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	
		// Make current column low and set the variable
		GPIO_write_low(&PORTC, columns[i]);
 1f4:	f7 01       	movw	r30, r14
 1f6:	61 91       	ld	r22, Z+
 1f8:	7f 01       	movw	r14, r30
 1fa:	88 e2       	ldi	r24, 0x28	; 40
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
 202:	0f 2e       	mov	r0, r31
 204:	f3 e0       	ldi	r31, 0x03	; 3
 206:	8f 2e       	mov	r8, r31
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	9f 2e       	mov	r9, r31
 20c:	f0 2d       	mov	r31, r0
 20e:	e6 01       	movw	r28, r12
		// Check each row
		for(uint8_t j = 0; j<4; j++)
		{
			
			// If it is low the button is pressed (current row x low valued column)
			if(GPIO_read(&PINC, rows[j]) == 0)
 210:	f4 01       	movw	r30, r8
 212:	61 91       	ld	r22, Z+
 214:	4f 01       	movw	r8, r30
 216:	86 e2       	ldi	r24, 0x26	; 38
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_read>
 21e:	81 11       	cpse	r24, r1
 220:	01 c0       	rjmp	.+2      	; 0x224 <keypad_scan+0x96>
			{
				rowN = j;
				// From the row and column number get the pressed key
				pKey = keyPadChar[rowN][colN];
 222:	78 80       	ld	r7, Y
 224:	23 96       	adiw	r28, 0x03	; 3
		// Make current column low and set the variable
		GPIO_write_low(&PORTC, columns[i]);
		colN = i;
		
		// Check each row
		for(uint8_t j = 0; j<4; j++)
 226:	80 16       	cp	r8, r16
 228:	91 06       	cpc	r9, r17
 22a:	91 f7       	brne	.-28     	; 0x210 <keypad_scan+0x82>
				pKey = keyPadChar[rowN][colN];
			}
		}
		
		// If a key pressed stop the current scanning cycle
		if(pKey != ' ')
 22c:	f0 e2       	ldi	r31, 0x20	; 32
 22e:	7f 12       	cpse	r7, r31
 230:	0c c0       	rjmp	.+24     	; 0x24a <keypad_scan+0xbc>
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	c8 1a       	sub	r12, r24
 236:	d8 0a       	sbc	r13, r24
	static uint8_t isKeyPressed = 0;
	uint8_t rowN = -1;          // Row Number
	uint8_t colN = -1;          // Column Number
	char pKey = ' ';           // Pressed Key
	
	for(uint8_t i = 0; i<3; i++)
 238:	ea 14       	cp	r14, r10
 23a:	fb 04       	cpc	r15, r11
 23c:	61 f6       	brne	.-104    	; 0x1d6 <keypad_scan+0x48>
 23e:	0b c0       	rjmp	.+22     	; 0x256 <keypad_scan+0xc8>
			break;
	}
	
	if(pKey != ' ' && isKeyPressed == 0)
	{
		isKeyPressed = 1;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <__data_end>
		return pKey;
 246:	87 2d       	mov	r24, r7
 248:	09 c0       	rjmp	.+18     	; 0x25c <keypad_scan+0xce>
		// If a key pressed stop the current scanning cycle
		if(pKey != ' ')
			break;
	}
	
	if(pKey != ' ' && isKeyPressed == 0)
 24a:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__data_end>
 24e:	88 23       	and	r24, r24
 250:	b9 f3       	breq	.-18     	; 0x240 <keypad_scan+0xb2>
		return pKey;
	}	
	else
	{
		pKey = ' ';
		return pKey;
 252:	80 e2       	ldi	r24, 0x20	; 32
 254:	03 c0       	rjmp	.+6      	; 0x25c <keypad_scan+0xce>
		isKeyPressed = 1;
		return pKey;
	}
	else if(pKey == ' ')
	{
		isKeyPressed = 0;
 256:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__data_end>
		return pKey;
 25a:	80 e2       	ldi	r24, 0x20	; 32
	{
		pKey = ' ';
		return pKey;
	}
	
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	df 90       	pop	r13
 26a:	cf 90       	pop	r12
 26c:	bf 90       	pop	r11
 26e:	af 90       	pop	r10
 270:	9f 90       	pop	r9
 272:	8f 90       	pop	r8
 274:	7f 90       	pop	r7
 276:	08 95       	ret

00000278 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 278:	29 9a       	sbi	0x05, 1	; 5
 27a:	85 e0       	ldi	r24, 0x05	; 5
 27c:	8a 95       	dec	r24
 27e:	f1 f7       	brne	.-4      	; 0x27c <toggle_e+0x4>
 280:	00 00       	nop
 282:	29 98       	cbi	0x05, 1	; 5
 284:	08 95       	ret

00000286 <lcd_write>:
 286:	cf 93       	push	r28
 288:	c8 2f       	mov	r28, r24
 28a:	66 23       	and	r22, r22
 28c:	11 f0       	breq	.+4      	; 0x292 <lcd_write+0xc>
 28e:	28 9a       	sbi	0x05, 0	; 5
 290:	01 c0       	rjmp	.+2      	; 0x294 <lcd_write+0xe>
 292:	28 98       	cbi	0x05, 0	; 5
 294:	54 9a       	sbi	0x0a, 4	; 10
 296:	55 9a       	sbi	0x0a, 5	; 10
 298:	56 9a       	sbi	0x0a, 6	; 10
 29a:	57 9a       	sbi	0x0a, 7	; 10
 29c:	5f 98       	cbi	0x0b, 7	; 11
 29e:	5e 98       	cbi	0x0b, 6	; 11
 2a0:	5d 98       	cbi	0x0b, 5	; 11
 2a2:	5c 98       	cbi	0x0b, 4	; 11
 2a4:	cc 23       	and	r28, r28
 2a6:	0c f4       	brge	.+2      	; 0x2aa <lcd_write+0x24>
 2a8:	5f 9a       	sbi	0x0b, 7	; 11
 2aa:	c6 fd       	sbrc	r28, 6
 2ac:	5e 9a       	sbi	0x0b, 6	; 11
 2ae:	c5 fd       	sbrc	r28, 5
 2b0:	5d 9a       	sbi	0x0b, 5	; 11
 2b2:	c4 fd       	sbrc	r28, 4
 2b4:	5c 9a       	sbi	0x0b, 4	; 11
 2b6:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 2ba:	5f 98       	cbi	0x0b, 7	; 11
 2bc:	5e 98       	cbi	0x0b, 6	; 11
 2be:	5d 98       	cbi	0x0b, 5	; 11
 2c0:	5c 98       	cbi	0x0b, 4	; 11
 2c2:	c3 fd       	sbrc	r28, 3
 2c4:	5f 9a       	sbi	0x0b, 7	; 11
 2c6:	c2 fd       	sbrc	r28, 2
 2c8:	5e 9a       	sbi	0x0b, 6	; 11
 2ca:	c1 fd       	sbrc	r28, 1
 2cc:	5d 9a       	sbi	0x0b, 5	; 11
 2ce:	c0 fd       	sbrc	r28, 0
 2d0:	5c 9a       	sbi	0x0b, 4	; 11
 2d2:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 2d6:	5c 9a       	sbi	0x0b, 4	; 11
 2d8:	5d 9a       	sbi	0x0b, 5	; 11
 2da:	5e 9a       	sbi	0x0b, 6	; 11
 2dc:	5f 9a       	sbi	0x0b, 7	; 11
 2de:	87 eb       	ldi	r24, 0xB7	; 183
 2e0:	9b e0       	ldi	r25, 0x0B	; 11
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <lcd_write+0x5c>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <lcd_write+0x62>
 2e8:	00 00       	nop
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <lcd_command>:
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	0e 94 43 01 	call	0x286	; 0x286 <lcd_write>
 2f4:	08 95       	ret

000002f6 <lcd_gotoxy>:
 2f6:	61 11       	cpse	r22, r1
 2f8:	04 c0       	rjmp	.+8      	; 0x302 <lcd_gotoxy+0xc>
 2fa:	80 58       	subi	r24, 0x80	; 128
 2fc:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 300:	08 95       	ret
 302:	61 30       	cpi	r22, 0x01	; 1
 304:	21 f4       	brne	.+8      	; 0x30e <lcd_gotoxy+0x18>
 306:	80 54       	subi	r24, 0x40	; 64
 308:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 30c:	08 95       	ret
 30e:	62 30       	cpi	r22, 0x02	; 2
 310:	21 f4       	brne	.+8      	; 0x31a <lcd_gotoxy+0x24>
 312:	8c 56       	subi	r24, 0x6C	; 108
 314:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 318:	08 95       	ret
 31a:	8c 52       	subi	r24, 0x2C	; 44
 31c:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 320:	08 95       	ret

00000322 <lcd_clrscr>:
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 328:	08 95       	ret

0000032a <lcd_putc>:
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	0e 94 43 01 	call	0x286	; 0x286 <lcd_write>
 330:	08 95       	ret

00000332 <lcd_puts>:
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	ec 01       	movw	r28, r24
 338:	21 96       	adiw	r28, 0x01	; 1
 33a:	fc 01       	movw	r30, r24
 33c:	80 81       	ld	r24, Z
 33e:	88 23       	and	r24, r24
 340:	29 f0       	breq	.+10     	; 0x34c <lcd_puts+0x1a>
 342:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_putc>
 346:	89 91       	ld	r24, Y+
 348:	81 11       	cpse	r24, r1
 34a:	fb cf       	rjmp	.-10     	; 0x342 <lcd_puts+0x10>
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 352:	cf 93       	push	r28
 354:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 356:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 358:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 35a:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 35c:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 35e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 360:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 362:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	99 ef       	ldi	r25, 0xF9	; 249
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <lcd_init+0x16>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <lcd_init+0x1c>
 36e:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 370:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 372:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 374:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 378:	8f e1       	ldi	r24, 0x1F	; 31
 37a:	9e e4       	ldi	r25, 0x4E	; 78
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_init+0x2a>
 380:	00 c0       	rjmp	.+0      	; 0x382 <lcd_init+0x30>
 382:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 384:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <lcd_init+0x3a>
 390:	00 c0       	rjmp	.+0      	; 0x392 <lcd_init+0x40>
 392:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 394:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <lcd_init+0x4a>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <lcd_init+0x50>
 3a2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 3a4:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 3a6:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <lcd_init+0x5c>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <lcd_init+0x62>
 3b4:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 3b6:	88 e2       	ldi	r24, 0x28	; 40
 3b8:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 3bc:	88 e0       	ldi	r24, 0x08	; 8
 3be:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
    lcd_clrscr();                  /* display clear                */
 3c2:	0e 94 91 01 	call	0x322	; 0x322 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 3c6:	86 e0       	ldi	r24, 0x06	; 6
 3c8:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 3cc:	8c 2f       	mov	r24, r28
 3ce:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
}/* lcd_init */
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <__vector_13>:
		}
	}
}

ISR(TIMER1_OVF_vect)
{
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	2f 93       	push	r18
 3e2:	3f 93       	push	r19
 3e4:	4f 93       	push	r20
 3e6:	5f 93       	push	r21
 3e8:	6f 93       	push	r22
 3ea:	7f 93       	push	r23
 3ec:	8f 93       	push	r24
 3ee:	9f 93       	push	r25
 3f0:	af 93       	push	r26
 3f2:	bf 93       	push	r27
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <__vector_13+0x28>
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
	volatile static uint8_t timerCnt = 0;		// Delay Counter
	char string1[2] = "  ";
 402:	80 e2       	ldi	r24, 0x20	; 32
 404:	90 e2       	ldi	r25, 0x20	; 32
 406:	9a 83       	std	Y+2, r25	; 0x02
 408:	89 83       	std	Y+1, r24	; 0x01
	
	// 5s count
	if(timerStage == 1)
 40a:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <timerStage>
 40e:	81 30       	cpi	r24, 0x01	; 1
 410:	a9 f5       	brne	.+106    	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
	{
		timerCnt++;
 412:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <timerCnt.2010>
 416:	8f 5f       	subi	r24, 0xFF	; 255
 418:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <timerCnt.2010>
		if(timerCnt >= 6)
 41c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <timerCnt.2010>
 420:	86 30       	cpi	r24, 0x06	; 6
 422:	20 f0       	brcs	.+8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
		{
			timerCnt = 0;
 424:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <timerCnt.2010>
			timerStage = 0;
 428:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <timerStage>
		}
		
		// Configure LCD
		lcd_gotoxy(2,0);
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	82 e0       	ldi	r24, 0x02	; 2
 430:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
		lcd_puts("Remaining time: ");
 434:	89 e1       	ldi	r24, 0x19	; 25
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
		if(timerCnt != 0)
 43c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <timerCnt.2010>
 440:	88 23       	and	r24, r24
 442:	89 f0       	breq	.+34     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
			lcd_puts(itoa((6-timerCnt), string1, 10));
 444:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <timerCnt.2010>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 448:	4a e0       	ldi	r20, 0x0A	; 10
 44a:	be 01       	movw	r22, r28
 44c:	6f 5f       	subi	r22, 0xFF	; 255
 44e:	7f 4f       	sbci	r23, 0xFF	; 255
 450:	26 e0       	ldi	r18, 0x06	; 6
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	f9 01       	movw	r30, r18
 456:	e9 1b       	sub	r30, r25
 458:	f1 09       	sbc	r31, r1
 45a:	cf 01       	movw	r24, r30
 45c:	0e 94 77 04 	call	0x8ee	; 0x8ee <__itoa_ncheck>
 460:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
 464:	0b c0       	rjmp	.+22     	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
		else
			lcd_puts(itoa(timerCnt, string1, 10));
 466:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <timerCnt.2010>
 46a:	4a e0       	ldi	r20, 0x0A	; 10
 46c:	be 01       	movw	r22, r28
 46e:	6f 5f       	subi	r22, 0xFF	; 255
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0e 94 77 04 	call	0x8ee	; 0x8ee <__itoa_ncheck>
 478:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
 47c:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <timerStage>
 480:	4a e0       	ldi	r20, 0x0A	; 10
 482:	be 01       	movw	r22, r28
 484:	6f 5f       	subi	r22, 0xFF	; 255
 486:	7f 4f       	sbci	r23, 0xFF	; 255
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	0e 94 77 04 	call	0x8ee	; 0x8ee <__itoa_ncheck>
	}
	
	uart_puts(itoa(timerStage, string1, 10));
 48e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <uart_puts>
}
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	ff 91       	pop	r31
 49c:	ef 91       	pop	r30
 49e:	bf 91       	pop	r27
 4a0:	af 91       	pop	r26
 4a2:	9f 91       	pop	r25
 4a4:	8f 91       	pop	r24
 4a6:	7f 91       	pop	r23
 4a8:	6f 91       	pop	r22
 4aa:	5f 91       	pop	r21
 4ac:	4f 91       	pop	r20
 4ae:	3f 91       	pop	r19
 4b0:	2f 91       	pop	r18
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <standby>:

/* Function definitions ----------------------------------------------*/
void standby()
{
	// Reset input ID
	inID = -1;
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <inID>
	
	// Reset typed pin
	inPin[0] = ' ';
 4c2:	e5 e1       	ldi	r30, 0x15	; 21
 4c4:	f1 e0       	ldi	r31, 0x01	; 1
 4c6:	80 e2       	ldi	r24, 0x20	; 32
 4c8:	80 83       	st	Z, r24
	inPin[1] = ' ';
 4ca:	81 83       	std	Z+1, r24	; 0x01
	inPin[2] = ' ';
 4cc:	82 83       	std	Z+2, r24	; 0x02
	inPin[3] = ' ';
 4ce:	83 83       	std	Z+3, r24	; 0x03
	
	// Reset Leds
	GPIO_write_low(&PORTB, greenLed);
 4d0:	67 e0       	ldi	r22, 0x07	; 7
 4d2:	85 e2       	ldi	r24, 0x25	; 37
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	GPIO_write_low(&PORTB, redLed);
 4da:	66 e0       	ldi	r22, 0x06	; 6
 4dc:	85 e2       	ldi	r24, 0x25	; 37
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Lock the door
	GPIO_write_low(&DDRB, Relay);
 4e4:	63 e0       	ldi	r22, 0x03	; 3
 4e6:	84 e2       	ldi	r24, 0x24	; 36
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Clear the lcd screen
	lcd_clrscr();
 4ee:	0e 94 91 01 	call	0x322	; 0x322 <lcd_clrscr>
	// Print to lcd screen
	lcd_gotoxy(2,0);
 4f2:	60 e0       	ldi	r22, 0x00	; 0
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
	lcd_puts("Dumbledoor wishes");
 4fa:	8a e2       	ldi	r24, 0x2A	; 42
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	lcd_gotoxy(4,1);
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	84 e0       	ldi	r24, 0x04	; 4
 506:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
	lcd_puts("Magical Days!");
 50a:	8c e3       	ldi	r24, 0x3C	; 60
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	lcd_gotoxy(1,2);
 512:	62 e0       	ldi	r22, 0x02	; 2
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
	lcd_puts("* --> Enter the pin");
 51a:	8a e4       	ldi	r24, 0x4A	; 74
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	lcd_gotoxy(1,3);
 522:	63 e0       	ldi	r22, 0x03	; 3
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
	lcd_puts("# --> Door Bell");
 52a:	8e e5       	ldi	r24, 0x5E	; 94
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
 532:	08 95       	ret

00000534 <main>:
						};

int main(void)
{
	// Initialize the LCD Display
	lcd_init(LCD_DISP_ON);
 534:	8c e0       	ldi	r24, 0x0C	; 12
 536:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_init>
	
	// Initialize the Key Pad
	keypad_init();
 53a:	0e 94 94 00 	call	0x128	; 0x128 <keypad_init>

	// Configure the Leds as output and set low
	GPIO_config_output(&DDRB, greenLed);
 53e:	67 e0       	ldi	r22, 0x07	; 7
 540:	84 e2       	ldi	r24, 0x24	; 36
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB, redLed);
 548:	66 e0       	ldi	r22, 0x06	; 6
 54a:	84 e2       	ldi	r24, 0x24	; 36
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, greenLed);
 552:	67 e0       	ldi	r22, 0x07	; 7
 554:	85 e2       	ldi	r24, 0x25	; 37
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	GPIO_write_low(&PORTB, redLed);	
 55c:	66 e0       	ldi	r22, 0x06	; 6
 55e:	85 e2       	ldi	r24, 0x25	; 37
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Configure the buzzer as output and set low
	GPIO_config_output(&DDRB, Buzzer);
 566:	65 e0       	ldi	r22, 0x05	; 5
 568:	84 e2       	ldi	r24, 0x24	; 36
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, Buzzer);
 570:	65 e0       	ldi	r22, 0x05	; 5
 572:	85 e2       	ldi	r24, 0x25	; 37
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Configure the doorbell as output and set low
	GPIO_config_output(&DDRB, doorBell);
 57a:	64 e0       	ldi	r22, 0x04	; 4
 57c:	84 e2       	ldi	r24, 0x24	; 36
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, doorBell);
 584:	64 e0       	ldi	r22, 0x04	; 4
 586:	85 e2       	ldi	r24, 0x25	; 37
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Configure Relay as output and set low
	GPIO_config_output(&DDRB, Relay);
 58e:	63 e0       	ldi	r22, 0x03	; 3
 590:	84 e2       	ldi	r24, 0x24	; 36
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, Relay);	
 598:	63 e0       	ldi	r22, 0x03	; 3
 59a:	85 e2       	ldi	r24, 0x25	; 37
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Set the program to standby state
	standby();
 5a2:	0e 94 5e 02 	call	0x4bc	; 0x4bc <standby>
	
    // Configure Timer/Counter0 for scanning the key pad
    // Enable interrupt and set the overflow prescaler to 4ms
    TIM0_overflow_4ms();
 5a6:	85 b5       	in	r24, 0x25	; 37
 5a8:	8d 7f       	andi	r24, 0xFD	; 253
 5aa:	85 bd       	out	0x25, r24	; 37
 5ac:	85 b5       	in	r24, 0x25	; 37
 5ae:	84 60       	ori	r24, 0x04	; 4
 5b0:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 5b2:	ee e6       	ldi	r30, 0x6E	; 110
 5b4:	f0 e0       	ldi	r31, 0x00	; 0
 5b6:	80 81       	ld	r24, Z
 5b8:	81 60       	ori	r24, 0x01	; 1
 5ba:	80 83       	st	Z, r24
	
	// Configure Timer/Counter1 for creating delays
	// Enable interrupt and set the overflow prescaler to 1s
	TIM1_overflow_1s();
 5bc:	e1 e8       	ldi	r30, 0x81	; 129
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	80 81       	ld	r24, Z
 5c2:	8c 7f       	andi	r24, 0xFC	; 252
 5c4:	80 83       	st	Z, r24
 5c6:	80 81       	ld	r24, Z
 5c8:	84 60       	ori	r24, 0x04	; 4
 5ca:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 5cc:	ef e6       	ldi	r30, 0x6F	; 111
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	80 81       	ld	r24, Z
 5d2:	81 60       	ori	r24, 0x01	; 1
 5d4:	80 83       	st	Z, r24
	
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 5d6:	89 e0       	ldi	r24, 0x09	; 9
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 3a 04 	call	0x874	; 0x874 <uart_init>
	
    // Enables interrupts by setting the global interrupt mask
    sei();
 5de:	78 94       	sei
 5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <main+0xac>

000005e2 <correctPin>:
	lcd_gotoxy(1,3);
	lcd_puts("# --> Door Bell");
}

void correctPin(uint8_t ID)
{	
 5e2:	cf 93       	push	r28
 5e4:	c8 2f       	mov	r28, r24
	// Unlock the door
	GPIO_write_high(&PORTB, Relay);	
 5e6:	63 e0       	ldi	r22, 0x03	; 3
 5e8:	85 e2       	ldi	r24, 0x25	; 37
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>

	// Light up the green led
	GPIO_write_high(&PORTB, greenLed);
 5f0:	67 e0       	ldi	r22, 0x07	; 7
 5f2:	85 e2       	ldi	r24, 0x25	; 37
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	
	// Clear the lcd screen
	lcd_clrscr();
 5fa:	0e 94 91 01 	call	0x322	; 0x322 <lcd_clrscr>
	// Print to lcd screen
	lcd_gotoxy(2,2);
 5fe:	62 e0       	ldi	r22, 0x02	; 2
 600:	82 e0       	ldi	r24, 0x02	; 2
 602:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
	lcd_puts("Correct pin.");
 606:	8e e6       	ldi	r24, 0x6E	; 110
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	
	// UART
	uart_puts(names[ID]);
 60e:	2d e0       	ldi	r18, 0x0D	; 13
 610:	c2 9f       	mul	r28, r18
 612:	c0 01       	movw	r24, r0
 614:	11 24       	eor	r1, r1
 616:	87 53       	subi	r24, 0x37	; 55
 618:	9e 4f       	sbci	r25, 0xFE	; 254
 61a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <uart_puts>
	uart_puts(" entered to the room!");
 61e:	8b e7       	ldi	r24, 0x7B	; 123
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	0e 94 68 04 	call	0x8d0	; 0x8d0 <uart_puts>
	uart_puts("\r\n");	
 626:	81 e9       	ldi	r24, 0x91	; 145
 628:	91 e0       	ldi	r25, 0x01	; 1
 62a:	0e 94 68 04 	call	0x8d0	; 0x8d0 <uart_puts>
}
 62e:	cf 91       	pop	r28
 630:	08 95       	ret

00000632 <wrongPin>:

void wrongPin()
{
	// Light up the red led
	GPIO_write_high(&PORTB, redLed);
 632:	66 e0       	ldi	r22, 0x06	; 6
 634:	85 e2       	ldi	r24, 0x25	; 37
 636:	90 e0       	ldi	r25, 0x00	; 0
 638:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	
	// Clear the lcd screen
	lcd_clrscr();
 63c:	0e 94 91 01 	call	0x322	; 0x322 <lcd_clrscr>
	// Print to lcd screen
	lcd_gotoxy(2,2);
 640:	62 e0       	ldi	r22, 0x02	; 2
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
	lcd_puts("Wrong pin.");
 648:	84 e9       	ldi	r24, 0x94	; 148
 64a:	91 e0       	ldi	r25, 0x01	; 1
 64c:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	
	// UART
	uart_puts("Wrong attempt to enter!");
 650:	8f e9       	ldi	r24, 0x9F	; 159
 652:	91 e0       	ldi	r25, 0x01	; 1
 654:	0e 94 68 04 	call	0x8d0	; 0x8d0 <uart_puts>
	uart_puts("\r\n");
 658:	81 e9       	ldi	r24, 0x91	; 145
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <uart_puts>
 660:	08 95       	ret

00000662 <comparePins>:
}

int8_t comparePins(char input[])
{
 662:	0f 93       	push	r16
 664:	1f 93       	push	r17
 666:	cf 93       	push	r28
 668:	c8 2f       	mov	r28, r24
 66a:	6d ef       	ldi	r22, 0xFD	; 253
 66c:	71 e0       	ldi	r23, 0x01	; 1
 66e:	0d e0       	ldi	r16, 0x0D	; 13
 670:	12 e0       	ldi	r17, 0x02	; 2
			{
				pinId = b;
			}
			else
			{
				pinId = -1;
 672:	5f ef       	ldi	r21, 0xFF	; 255
 674:	11 c0       	rjmp	.+34     	; 0x698 <comparePins+0x36>
	{
		// Compare 4-digit input pin with the registers pin
		// Ex. pi
		for(uint8_t b = 0; b<4; b++)
		{
			if(input[b] == pins[a][b])
 676:	41 91       	ld	r20, Z+
 678:	3d 91       	ld	r19, X+
 67a:	43 13       	cpse	r20, r19
 67c:	02 c0       	rjmp	.+4      	; 0x682 <comparePins+0x20>
			{
				pinId = b;
 67e:	82 2f       	mov	r24, r18
 680:	01 c0       	rjmp	.+2      	; 0x684 <comparePins+0x22>
			}
			else
			{
				pinId = -1;
 682:	85 2f       	mov	r24, r21
	// pins[0], pins[1], pins[2], pins[3]
	for(uint8_t a = 0; a<4; a++)
	{
		// Compare 4-digit input pin with the registers pin
		// Ex. pi
		for(uint8_t b = 0; b<4; b++)
 684:	2f 5f       	subi	r18, 0xFF	; 255
 686:	24 30       	cpi	r18, 0x04	; 4
 688:	b1 f7       	brne	.-20     	; 0x676 <comparePins+0x14>
			{
				pinId = -1;
			}
		}
		// If an active pin is found, stop comparing
		if(pinId != -1)
 68a:	8f 3f       	cpi	r24, 0xFF	; 255
 68c:	51 f4       	brne	.+20     	; 0x6a2 <comparePins+0x40>
 68e:	6c 5f       	subi	r22, 0xFC	; 252
 690:	7f 4f       	sbci	r23, 0xFF	; 255
{
	int8_t pinId = -1;	// Active pin ID, If -1 no active pins

	// Checking each registered pin
	// pins[0], pins[1], pins[2], pins[3]
	for(uint8_t a = 0; a<4; a++)
 692:	06 17       	cp	r16, r22
 694:	17 07       	cpc	r17, r23
 696:	29 f0       	breq	.+10     	; 0x6a2 <comparePins+0x40>
 698:	ec 2f       	mov	r30, r28
 69a:	f9 2f       	mov	r31, r25
	uart_puts("Wrong attempt to enter!");
	uart_puts("\r\n");
}

int8_t comparePins(char input[])
{
 69c:	db 01       	movw	r26, r22
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	ea cf       	rjmp	.-44     	; 0x676 <comparePins+0x14>
		if(pinId != -1)
		break;
	}
	
	return pinId;
 6a2:	cf 91       	pop	r28
 6a4:	1f 91       	pop	r17
 6a6:	0f 91       	pop	r16
 6a8:	08 95       	ret

000006aa <__vector_16>:
	return 0;
}

/* Interrupt handlers ------------------------------------------------*/
ISR(TIMER0_OVF_vect)
{
 6aa:	1f 92       	push	r1
 6ac:	0f 92       	push	r0
 6ae:	0f b6       	in	r0, 0x3f	; 63
 6b0:	0f 92       	push	r0
 6b2:	11 24       	eor	r1, r1
 6b4:	2f 93       	push	r18
 6b6:	3f 93       	push	r19
 6b8:	4f 93       	push	r20
 6ba:	5f 93       	push	r21
 6bc:	6f 93       	push	r22
 6be:	7f 93       	push	r23
 6c0:	8f 93       	push	r24
 6c2:	9f 93       	push	r25
 6c4:	af 93       	push	r26
 6c6:	bf 93       	push	r27
 6c8:	ef 93       	push	r30
 6ca:	ff 93       	push	r31
	volatile static char pressedKey = ' ';		// Pressed Key
	volatile static uint8_t pinDigitCnt = 0;	// Contains the index value of the pin
	volatile static uint8_t getPin = 0;			// Get Pin --> 0: No, 1:Yes
	
	// Scan the Keypad
	pressedKey = keypad_scan();
 6cc:	0e 94 c7 00 	call	0x18e	; 0x18e <keypad_scan>
 6d0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <pressedKey.2002>
	
	// If user pressed *
	if(pressedKey == '#' && getPin == 0)
 6d4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2002>
 6d8:	83 32       	cpi	r24, 0x23	; 35
 6da:	21 f4       	brne	.+8      	; 0x6e4 <__vector_16+0x3a>
 6dc:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <getPin.2004>
 6e0:	88 23       	and	r24, r24
 6e2:	c9 f0       	breq	.+50     	; 0x716 <__vector_16+0x6c>
		// DoorBell
		// Wait 3s ??
		// Standby
	}
	//If user pressed #
	else if(pressedKey == '*' && getPin == 0)
 6e4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2002>
 6e8:	8a 32       	cpi	r24, 0x2A	; 42
 6ea:	a9 f4       	brne	.+42     	; 0x716 <__vector_16+0x6c>
 6ec:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <getPin.2004>
 6f0:	81 11       	cpse	r24, r1
 6f2:	11 c0       	rjmp	.+34     	; 0x716 <__vector_16+0x6c>
	{
		getPin = 1;			// Enable getPin
 6f4:	81 e0       	ldi	r24, 0x01	; 1
 6f6:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <getPin.2004>
		timerStage = 1;		// Start 5 second timer
 6fa:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <timerStage>
		pinDigitCnt = 0;	// Set pin input index to 0
 6fe:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <pinDigitCnt.2003>
						
		// Configure lcd
		lcd_clrscr();
 702:	0e 94 91 01 	call	0x322	; 0x322 <lcd_clrscr>
		lcd_gotoxy(2,1);
 706:	61 e0       	ldi	r22, 0x01	; 1
 708:	82 e0       	ldi	r24, 0x02	; 2
 70a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
		lcd_puts("--Enter the pin--");
 70e:	87 eb       	ldi	r24, 0xB7	; 183
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	}
		
	// If getPin enabled get the typed pin
	if(getPin == 1 && pressedKey!= ' ')
 716:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <getPin.2004>
 71a:	81 30       	cpi	r24, 0x01	; 1
 71c:	19 f5       	brne	.+70     	; 0x764 <__vector_16+0xba>
 71e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2002>
 722:	80 32       	cpi	r24, 0x20	; 32
 724:	f9 f0       	breq	.+62     	; 0x764 <__vector_16+0xba>
	{
		if(pressedKey != '*' && pressedKey != '#')
 726:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2002>
 72a:	8a 32       	cpi	r24, 0x2A	; 42
 72c:	d9 f0       	breq	.+54     	; 0x764 <__vector_16+0xba>
 72e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2002>
 732:	83 32       	cpi	r24, 0x23	; 35
 734:	b9 f0       	breq	.+46     	; 0x764 <__vector_16+0xba>
		{
			// Put the pressed key into inputPin var
			inPin[pinDigitCnt] = pressedKey;
 736:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <pinDigitCnt.2003>
 73a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2002>
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	eb 5e       	subi	r30, 0xEB	; 235
 742:	fe 4f       	sbci	r31, 0xFE	; 254
 744:	80 83       	st	Z, r24
				
			// Configure lcd
			lcd_gotoxy((pinDigitCnt + 8),2);
 746:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <pinDigitCnt.2003>
 74a:	62 e0       	ldi	r22, 0x02	; 2
 74c:	88 5f       	subi	r24, 0xF8	; 248
 74e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
			lcd_putc(pressedKey);
 752:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2002>
 756:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_putc>
				
			// Increase the counter
			pinDigitCnt++;
 75a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <pinDigitCnt.2003>
 75e:	8f 5f       	subi	r24, 0xFF	; 255
 760:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <pinDigitCnt.2003>
			// standby
		}
	}
	
	// If timer stops or user enters all the digits compare the pin
	if(timerStage == 0 || pinDigitCnt > 3)
 764:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <timerStage>
 768:	88 23       	and	r24, r24
 76a:	21 f0       	breq	.+8      	; 0x774 <__vector_16+0xca>
 76c:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <pinDigitCnt.2003>
 770:	84 30       	cpi	r24, 0x04	; 4
 772:	b8 f0       	brcs	.+46     	; 0x7a2 <__vector_16+0xf8>
	{
		getPin = 0;
 774:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <getPin.2004>
		pinDigitCnt = 0;
 778:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <pinDigitCnt.2003>
		
		inID = comparePins(inPin);
 77c:	85 e1       	ldi	r24, 0x15	; 21
 77e:	91 e0       	ldi	r25, 0x01	; 1
 780:	0e 94 31 03 	call	0x662	; 0x662 <comparePins>
 784:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <inID>
		
		// Typed pin is incorrect
		if(inID == -1)
 788:	8f 3f       	cpi	r24, 0xFF	; 255
 78a:	29 f4       	brne	.+10     	; 0x796 <__vector_16+0xec>
		{
			// If user typed pin before the timer finish stop the timer
			timerStage = 0;
 78c:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <timerStage>
			wrongPin();
 790:	0e 94 19 03 	call	0x632	; 0x632 <wrongPin>
 794:	06 c0       	rjmp	.+12     	; 0x7a2 <__vector_16+0xf8>
			// Wait 3s
			// Standby
		}
		else if(inID >= 0 && inID < 4)
 796:	84 30       	cpi	r24, 0x04	; 4
 798:	20 f4       	brcc	.+8      	; 0x7a2 <__vector_16+0xf8>
		{
			// If user typed pin before the timer finish stop the timer
			timerStage = 0;
 79a:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <timerStage>
			correctPin(inID);
 79e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <correctPin>
			// Wait 3s
			// Standby
		}
	}
}
 7a2:	ff 91       	pop	r31
 7a4:	ef 91       	pop	r30
 7a6:	bf 91       	pop	r27
 7a8:	af 91       	pop	r26
 7aa:	9f 91       	pop	r25
 7ac:	8f 91       	pop	r24
 7ae:	7f 91       	pop	r23
 7b0:	6f 91       	pop	r22
 7b2:	5f 91       	pop	r21
 7b4:	4f 91       	pop	r20
 7b6:	3f 91       	pop	r19
 7b8:	2f 91       	pop	r18
 7ba:	0f 90       	pop	r0
 7bc:	0f be       	out	0x3f, r0	; 63
 7be:	0f 90       	pop	r0
 7c0:	1f 90       	pop	r1
 7c2:	18 95       	reti

000007c4 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 7c4:	1f 92       	push	r1
 7c6:	0f 92       	push	r0
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	0f 92       	push	r0
 7cc:	11 24       	eor	r1, r1
 7ce:	2f 93       	push	r18
 7d0:	8f 93       	push	r24
 7d2:	9f 93       	push	r25
 7d4:	ef 93       	push	r30
 7d6:	ff 93       	push	r31
 7d8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 7dc:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 7e0:	8c 71       	andi	r24, 0x1C	; 28
 7e2:	e0 91 15 02 	lds	r30, 0x0215	; 0x800215 <UART_RxHead>
 7e6:	ef 5f       	subi	r30, 0xFF	; 255
 7e8:	ef 73       	andi	r30, 0x3F	; 63
 7ea:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <UART_RxTail>
 7ee:	e9 17       	cp	r30, r25
 7f0:	39 f0       	breq	.+14     	; 0x800 <__vector_18+0x3c>
 7f2:	e0 93 15 02 	sts	0x0215, r30	; 0x800215 <UART_RxHead>
 7f6:	f0 e0       	ldi	r31, 0x00	; 0
 7f8:	e8 5e       	subi	r30, 0xE8	; 232
 7fa:	fd 4f       	sbci	r31, 0xFD	; 253
 7fc:	20 83       	st	Z, r18
 7fe:	01 c0       	rjmp	.+2      	; 0x802 <__vector_18+0x3e>
 800:	82 e0       	ldi	r24, 0x02	; 2
 802:	90 91 13 02 	lds	r25, 0x0213	; 0x800213 <UART_LastRxError>
 806:	89 2b       	or	r24, r25
 808:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <UART_LastRxError>
 80c:	ff 91       	pop	r31
 80e:	ef 91       	pop	r30
 810:	9f 91       	pop	r25
 812:	8f 91       	pop	r24
 814:	2f 91       	pop	r18
 816:	0f 90       	pop	r0
 818:	0f be       	out	0x3f, r0	; 63
 81a:	0f 90       	pop	r0
 81c:	1f 90       	pop	r1
 81e:	18 95       	reti

00000820 <__vector_19>:
 820:	1f 92       	push	r1
 822:	0f 92       	push	r0
 824:	0f b6       	in	r0, 0x3f	; 63
 826:	0f 92       	push	r0
 828:	11 24       	eor	r1, r1
 82a:	8f 93       	push	r24
 82c:	9f 93       	push	r25
 82e:	ef 93       	push	r30
 830:	ff 93       	push	r31
 832:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <UART_TxHead>
 836:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <UART_TxTail>
 83a:	98 17       	cp	r25, r24
 83c:	69 f0       	breq	.+26     	; 0x858 <__vector_19+0x38>
 83e:	e0 91 16 02 	lds	r30, 0x0216	; 0x800216 <UART_TxTail>
 842:	ef 5f       	subi	r30, 0xFF	; 255
 844:	ef 73       	andi	r30, 0x3F	; 63
 846:	e0 93 16 02 	sts	0x0216, r30	; 0x800216 <UART_TxTail>
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	e8 5a       	subi	r30, 0xA8	; 168
 84e:	fd 4f       	sbci	r31, 0xFD	; 253
 850:	80 81       	ld	r24, Z
 852:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 856:	05 c0       	rjmp	.+10     	; 0x862 <__vector_19+0x42>
 858:	e1 ec       	ldi	r30, 0xC1	; 193
 85a:	f0 e0       	ldi	r31, 0x00	; 0
 85c:	80 81       	ld	r24, Z
 85e:	8f 7d       	andi	r24, 0xDF	; 223
 860:	80 83       	st	Z, r24
 862:	ff 91       	pop	r31
 864:	ef 91       	pop	r30
 866:	9f 91       	pop	r25
 868:	8f 91       	pop	r24
 86a:	0f 90       	pop	r0
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	0f 90       	pop	r0
 870:	1f 90       	pop	r1
 872:	18 95       	reti

00000874 <uart_init>:
 874:	10 92 17 02 	sts	0x0217, r1	; 0x800217 <UART_TxHead>
 878:	10 92 16 02 	sts	0x0216, r1	; 0x800216 <UART_TxTail>
 87c:	10 92 15 02 	sts	0x0215, r1	; 0x800215 <UART_RxHead>
 880:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <UART_RxTail>
 884:	99 23       	and	r25, r25
 886:	1c f4       	brge	.+6      	; 0x88e <uart_init+0x1a>
 888:	22 e0       	ldi	r18, 0x02	; 2
 88a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 88e:	90 78       	andi	r25, 0x80	; 128
 890:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 894:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 898:	88 e9       	ldi	r24, 0x98	; 152
 89a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 89e:	86 e0       	ldi	r24, 0x06	; 6
 8a0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 8a4:	08 95       	ret

000008a6 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 8a6:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <UART_TxHead>
 8aa:	2f 5f       	subi	r18, 0xFF	; 255
 8ac:	2f 73       	andi	r18, 0x3F	; 63

    while (tmphead == UART_TxTail)
 8ae:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <UART_TxTail>
 8b2:	29 17       	cp	r18, r25
 8b4:	e1 f3       	breq	.-8      	; 0x8ae <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 8b6:	e2 2f       	mov	r30, r18
 8b8:	f0 e0       	ldi	r31, 0x00	; 0
 8ba:	e8 5a       	subi	r30, 0xA8	; 168
 8bc:	fd 4f       	sbci	r31, 0xFD	; 253
 8be:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 8c0:	20 93 17 02 	sts	0x0217, r18	; 0x800217 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 8c4:	e1 ec       	ldi	r30, 0xC1	; 193
 8c6:	f0 e0       	ldi	r31, 0x00	; 0
 8c8:	80 81       	ld	r24, Z
 8ca:	80 62       	ori	r24, 0x20	; 32
 8cc:	80 83       	st	Z, r24
 8ce:	08 95       	ret

000008d0 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 8d0:	cf 93       	push	r28
 8d2:	df 93       	push	r29
 8d4:	ec 01       	movw	r28, r24
    while (*s)
 8d6:	88 81       	ld	r24, Y
 8d8:	88 23       	and	r24, r24
 8da:	31 f0       	breq	.+12     	; 0x8e8 <uart_puts+0x18>
 8dc:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 8de:	0e 94 53 04 	call	0x8a6	; 0x8a6 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 8e2:	89 91       	ld	r24, Y+
 8e4:	81 11       	cpse	r24, r1
 8e6:	fb cf       	rjmp	.-10     	; 0x8de <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 8e8:	df 91       	pop	r29
 8ea:	cf 91       	pop	r28
 8ec:	08 95       	ret

000008ee <__itoa_ncheck>:
 8ee:	bb 27       	eor	r27, r27
 8f0:	4a 30       	cpi	r20, 0x0A	; 10
 8f2:	31 f4       	brne	.+12     	; 0x900 <__stack+0x1>
 8f4:	99 23       	and	r25, r25
 8f6:	22 f4       	brpl	.+8      	; 0x900 <__stack+0x1>
 8f8:	bd e2       	ldi	r27, 0x2D	; 45
 8fa:	90 95       	com	r25
 8fc:	81 95       	neg	r24
 8fe:	9f 4f       	sbci	r25, 0xFF	; 255
 900:	0c 94 83 04 	jmp	0x906	; 0x906 <__utoa_common>

00000904 <__utoa_ncheck>:
 904:	bb 27       	eor	r27, r27

00000906 <__utoa_common>:
 906:	fb 01       	movw	r30, r22
 908:	55 27       	eor	r21, r21
 90a:	aa 27       	eor	r26, r26
 90c:	88 0f       	add	r24, r24
 90e:	99 1f       	adc	r25, r25
 910:	aa 1f       	adc	r26, r26
 912:	a4 17       	cp	r26, r20
 914:	10 f0       	brcs	.+4      	; 0x91a <__utoa_common+0x14>
 916:	a4 1b       	sub	r26, r20
 918:	83 95       	inc	r24
 91a:	50 51       	subi	r21, 0x10	; 16
 91c:	b9 f7       	brne	.-18     	; 0x90c <__utoa_common+0x6>
 91e:	a0 5d       	subi	r26, 0xD0	; 208
 920:	aa 33       	cpi	r26, 0x3A	; 58
 922:	08 f0       	brcs	.+2      	; 0x926 <__utoa_common+0x20>
 924:	a9 5d       	subi	r26, 0xD9	; 217
 926:	a1 93       	st	Z+, r26
 928:	00 97       	sbiw	r24, 0x00	; 0
 92a:	79 f7       	brne	.-34     	; 0x90a <__utoa_common+0x4>
 92c:	b1 11       	cpse	r27, r1
 92e:	b1 93       	st	Z+, r27
 930:	11 92       	st	Z+, r1
 932:	cb 01       	movw	r24, r22
 934:	0c 94 9c 04 	jmp	0x938	; 0x938 <strrev>

00000938 <strrev>:
 938:	dc 01       	movw	r26, r24
 93a:	fc 01       	movw	r30, r24
 93c:	67 2f       	mov	r22, r23
 93e:	71 91       	ld	r23, Z+
 940:	77 23       	and	r23, r23
 942:	e1 f7       	brne	.-8      	; 0x93c <strrev+0x4>
 944:	32 97       	sbiw	r30, 0x02	; 2
 946:	04 c0       	rjmp	.+8      	; 0x950 <strrev+0x18>
 948:	7c 91       	ld	r23, X
 94a:	6d 93       	st	X+, r22
 94c:	70 83       	st	Z, r23
 94e:	62 91       	ld	r22, -Z
 950:	ae 17       	cp	r26, r30
 952:	bf 07       	cpc	r27, r31
 954:	c8 f3       	brcs	.-14     	; 0x948 <strrev+0x10>
 956:	08 95       	ret

00000958 <_exit>:
 958:	f8 94       	cli

0000095a <__stop_program>:
 95a:	ff cf       	rjmp	.-2      	; 0x95a <__stop_program>
