
Dumbledoor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800100  00000c78  00000d0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008c  00800228  00800228  00000e34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022f8  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cec  00000000  00000000  00003344  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001162  00000000  00000000  00004030  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  00005194  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079f  00000000  00000000  00005628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001159  00000000  00000000  00005dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00006f20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 c0 04 	jmp	0x980	; 0x980 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__vector_18>
  4c:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 e2       	ldi	r26, 0x28	; 40
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3b       	cpi	r26, 0xB4	; 180
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <main>
  9e:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_pullup>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_pullup+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_pullup+0xa>
  d0:	92 2f       	mov	r25, r18
  d2:	90 95       	com	r25
  d4:	89 23       	and	r24, r25
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	28 2b       	or	r18, r24
  de:	21 83       	std	Z+1, r18	; 0x01
  e0:	08 95       	ret

000000e2 <GPIO_write_low>:
  e2:	fc 01       	movw	r30, r24
  e4:	90 81       	ld	r25, Z
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GPIO_write_low+0xe>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <GPIO_write_low+0xa>
  f4:	20 95       	com	r18
  f6:	29 23       	and	r18, r25
  f8:	20 83       	st	Z, r18
  fa:	08 95       	ret

000000fc <GPIO_write_high>:
  fc:	fc 01       	movw	r30, r24
  fe:	40 81       	ld	r20, Z
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <GPIO_write_high+0xe>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <GPIO_write_high+0xa>
 10e:	24 2b       	or	r18, r20
 110:	20 83       	st	Z, r18
 112:	08 95       	ret

00000114 <GPIO_toggle>:
 114:	fc 01       	movw	r30, r24
 116:	40 81       	ld	r20, Z
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	02 c0       	rjmp	.+4      	; 0x122 <GPIO_toggle+0xe>
 11e:	22 0f       	add	r18, r18
 120:	33 1f       	adc	r19, r19
 122:	6a 95       	dec	r22
 124:	e2 f7       	brpl	.-8      	; 0x11e <GPIO_toggle+0xa>
 126:	24 27       	eor	r18, r20
 128:	20 83       	st	Z, r18
 12a:	08 95       	ret

0000012c <GPIO_read>:
 12c:	fc 01       	movw	r30, r24
 12e:	80 81       	ld	r24, Z
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <GPIO_read+0xc>
 134:	95 95       	asr	r25
 136:	87 95       	ror	r24
 138:	6a 95       	dec	r22
 13a:	e2 f7       	brpl	.-8      	; 0x134 <GPIO_read+0x8>
 13c:	81 70       	andi	r24, 0x01	; 1
 13e:	08 95       	ret

00000140 <keypad_init>:
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	87 e2       	ldi	r24, 0x27	; 39
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	87 e2       	ldi	r24, 0x27	; 39
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	87 e2       	ldi	r24, 0x27	; 39
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 15e:	60 e0       	ldi	r22, 0x00	; 0
 160:	88 e2       	ldi	r24, 0x28	; 40
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	88 e2       	ldi	r24, 0x28	; 40
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	88 e2       	ldi	r24, 0x28	; 40
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 17c:	66 e0       	ldi	r22, 0x06	; 6
 17e:	87 e2       	ldi	r24, 0x27	; 39
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
 186:	65 e0       	ldi	r22, 0x05	; 5
 188:	87 e2       	ldi	r24, 0x27	; 39
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
 190:	64 e0       	ldi	r22, 0x04	; 4
 192:	87 e2       	ldi	r24, 0x27	; 39
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
 19a:	63 e0       	ldi	r22, 0x03	; 3
 19c:	87 e2       	ldi	r24, 0x27	; 39
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
 1a4:	08 95       	ret

000001a6 <keypad_scan>:
 1a6:	7f 92       	push	r7
 1a8:	8f 92       	push	r8
 1aa:	9f 92       	push	r9
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	cf 92       	push	r12
 1b2:	df 92       	push	r13
 1b4:	ef 92       	push	r14
 1b6:	ff 92       	push	r15
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
 1c0:	0f 2e       	mov	r0, r31
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	ef 2e       	mov	r14, r31
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	ff 2e       	mov	r15, r31
 1ca:	f0 2d       	mov	r31, r0
 1cc:	0f 2e       	mov	r0, r31
 1ce:	f7 e0       	ldi	r31, 0x07	; 7
 1d0:	cf 2e       	mov	r12, r31
 1d2:	f1 e0       	ldi	r31, 0x01	; 1
 1d4:	df 2e       	mov	r13, r31
 1d6:	f0 2d       	mov	r31, r0
 1d8:	0f 2e       	mov	r0, r31
 1da:	f3 e0       	ldi	r31, 0x03	; 3
 1dc:	af 2e       	mov	r10, r31
 1de:	f1 e0       	ldi	r31, 0x01	; 1
 1e0:	bf 2e       	mov	r11, r31
 1e2:	f0 2d       	mov	r31, r0
 1e4:	68 94       	set
 1e6:	77 24       	eor	r7, r7
 1e8:	75 f8       	bld	r7, 5
 1ea:	07 e0       	ldi	r16, 0x07	; 7
 1ec:	11 e0       	ldi	r17, 0x01	; 1
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	88 e2       	ldi	r24, 0x28	; 40
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	88 e2       	ldi	r24, 0x28	; 40
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 202:	62 e0       	ldi	r22, 0x02	; 2
 204:	88 e2       	ldi	r24, 0x28	; 40
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 20c:	f7 01       	movw	r30, r14
 20e:	61 91       	ld	r22, Z+
 210:	7f 01       	movw	r14, r30
 212:	88 e2       	ldi	r24, 0x28	; 40
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
 21a:	0f 2e       	mov	r0, r31
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	8f 2e       	mov	r8, r31
 220:	f1 e0       	ldi	r31, 0x01	; 1
 222:	9f 2e       	mov	r9, r31
 224:	f0 2d       	mov	r31, r0
 226:	e6 01       	movw	r28, r12
 228:	f4 01       	movw	r30, r8
 22a:	61 91       	ld	r22, Z+
 22c:	4f 01       	movw	r8, r30
 22e:	86 e2       	ldi	r24, 0x26	; 38
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 96 00 	call	0x12c	; 0x12c <GPIO_read>
 236:	81 11       	cpse	r24, r1
 238:	01 c0       	rjmp	.+2      	; 0x23c <keypad_scan+0x96>
 23a:	78 80       	ld	r7, Y
 23c:	23 96       	adiw	r28, 0x03	; 3
 23e:	80 16       	cp	r8, r16
 240:	91 06       	cpc	r9, r17
 242:	91 f7       	brne	.-28     	; 0x228 <keypad_scan+0x82>
 244:	f0 e2       	ldi	r31, 0x20	; 32
 246:	7f 12       	cpse	r7, r31
 248:	0c c0       	rjmp	.+24     	; 0x262 <keypad_scan+0xbc>
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	c8 1a       	sub	r12, r24
 24e:	d8 0a       	sbc	r13, r24
 250:	ea 14       	cp	r14, r10
 252:	fb 04       	cpc	r15, r11
 254:	61 f6       	brne	.-104    	; 0x1ee <keypad_scan+0x48>
 256:	0b c0       	rjmp	.+22     	; 0x26e <keypad_scan+0xc8>
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
 25e:	87 2d       	mov	r24, r7
 260:	09 c0       	rjmp	.+18     	; 0x274 <keypad_scan+0xce>
 262:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
 266:	88 23       	and	r24, r24
 268:	b9 f3       	breq	.-18     	; 0x258 <keypad_scan+0xb2>
 26a:	80 e2       	ldi	r24, 0x20	; 32
 26c:	03 c0       	rjmp	.+6      	; 0x274 <keypad_scan+0xce>
 26e:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <__data_end>
 272:	80 e2       	ldi	r24, 0x20	; 32
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	df 90       	pop	r13
 282:	cf 90       	pop	r12
 284:	bf 90       	pop	r11
 286:	af 90       	pop	r10
 288:	9f 90       	pop	r9
 28a:	8f 90       	pop	r8
 28c:	7f 90       	pop	r7
 28e:	08 95       	ret

00000290 <toggle_e>:
 290:	29 9a       	sbi	0x05, 1	; 5
 292:	85 e0       	ldi	r24, 0x05	; 5
 294:	8a 95       	dec	r24
 296:	f1 f7       	brne	.-4      	; 0x294 <toggle_e+0x4>
 298:	00 00       	nop
 29a:	29 98       	cbi	0x05, 1	; 5
 29c:	08 95       	ret

0000029e <lcd_write>:
 29e:	cf 93       	push	r28
 2a0:	c8 2f       	mov	r28, r24
 2a2:	66 23       	and	r22, r22
 2a4:	11 f0       	breq	.+4      	; 0x2aa <lcd_write+0xc>
 2a6:	28 9a       	sbi	0x05, 0	; 5
 2a8:	01 c0       	rjmp	.+2      	; 0x2ac <lcd_write+0xe>
 2aa:	28 98       	cbi	0x05, 0	; 5
 2ac:	54 9a       	sbi	0x0a, 4	; 10
 2ae:	55 9a       	sbi	0x0a, 5	; 10
 2b0:	56 9a       	sbi	0x0a, 6	; 10
 2b2:	57 9a       	sbi	0x0a, 7	; 10
 2b4:	5f 98       	cbi	0x0b, 7	; 11
 2b6:	5e 98       	cbi	0x0b, 6	; 11
 2b8:	5d 98       	cbi	0x0b, 5	; 11
 2ba:	5c 98       	cbi	0x0b, 4	; 11
 2bc:	cc 23       	and	r28, r28
 2be:	0c f4       	brge	.+2      	; 0x2c2 <lcd_write+0x24>
 2c0:	5f 9a       	sbi	0x0b, 7	; 11
 2c2:	c6 fd       	sbrc	r28, 6
 2c4:	5e 9a       	sbi	0x0b, 6	; 11
 2c6:	c5 fd       	sbrc	r28, 5
 2c8:	5d 9a       	sbi	0x0b, 5	; 11
 2ca:	c4 fd       	sbrc	r28, 4
 2cc:	5c 9a       	sbi	0x0b, 4	; 11
 2ce:	0e 94 48 01 	call	0x290	; 0x290 <toggle_e>
 2d2:	5f 98       	cbi	0x0b, 7	; 11
 2d4:	5e 98       	cbi	0x0b, 6	; 11
 2d6:	5d 98       	cbi	0x0b, 5	; 11
 2d8:	5c 98       	cbi	0x0b, 4	; 11
 2da:	c3 fd       	sbrc	r28, 3
 2dc:	5f 9a       	sbi	0x0b, 7	; 11
 2de:	c2 fd       	sbrc	r28, 2
 2e0:	5e 9a       	sbi	0x0b, 6	; 11
 2e2:	c1 fd       	sbrc	r28, 1
 2e4:	5d 9a       	sbi	0x0b, 5	; 11
 2e6:	c0 fd       	sbrc	r28, 0
 2e8:	5c 9a       	sbi	0x0b, 4	; 11
 2ea:	0e 94 48 01 	call	0x290	; 0x290 <toggle_e>
 2ee:	5c 9a       	sbi	0x0b, 4	; 11
 2f0:	5d 9a       	sbi	0x0b, 5	; 11
 2f2:	5e 9a       	sbi	0x0b, 6	; 11
 2f4:	5f 9a       	sbi	0x0b, 7	; 11
 2f6:	87 eb       	ldi	r24, 0xB7	; 183
 2f8:	9b e0       	ldi	r25, 0x0B	; 11
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <lcd_write+0x5c>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <lcd_write+0x62>
 300:	00 00       	nop
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <lcd_command>:
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_write>
 30c:	08 95       	ret

0000030e <lcd_gotoxy>:
 30e:	61 11       	cpse	r22, r1
 310:	04 c0       	rjmp	.+8      	; 0x31a <lcd_gotoxy+0xc>
 312:	80 58       	subi	r24, 0x80	; 128
 314:	0e 94 83 01 	call	0x306	; 0x306 <lcd_command>
 318:	08 95       	ret
 31a:	61 30       	cpi	r22, 0x01	; 1
 31c:	21 f4       	brne	.+8      	; 0x326 <lcd_gotoxy+0x18>
 31e:	80 54       	subi	r24, 0x40	; 64
 320:	0e 94 83 01 	call	0x306	; 0x306 <lcd_command>
 324:	08 95       	ret
 326:	62 30       	cpi	r22, 0x02	; 2
 328:	21 f4       	brne	.+8      	; 0x332 <lcd_gotoxy+0x24>
 32a:	8c 56       	subi	r24, 0x6C	; 108
 32c:	0e 94 83 01 	call	0x306	; 0x306 <lcd_command>
 330:	08 95       	ret
 332:	8c 52       	subi	r24, 0x2C	; 44
 334:	0e 94 83 01 	call	0x306	; 0x306 <lcd_command>
 338:	08 95       	ret

0000033a <lcd_clrscr>:
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	0e 94 83 01 	call	0x306	; 0x306 <lcd_command>
 340:	08 95       	ret

00000342 <lcd_putc>:
 342:	61 e0       	ldi	r22, 0x01	; 1
 344:	0e 94 4f 01 	call	0x29e	; 0x29e <lcd_write>
 348:	08 95       	ret

0000034a <lcd_puts>:
 34a:	cf 93       	push	r28
 34c:	df 93       	push	r29
 34e:	ec 01       	movw	r28, r24
 350:	21 96       	adiw	r28, 0x01	; 1
 352:	fc 01       	movw	r30, r24
 354:	80 81       	ld	r24, Z
 356:	88 23       	and	r24, r24
 358:	29 f0       	breq	.+10     	; 0x364 <lcd_puts+0x1a>
 35a:	0e 94 a1 01 	call	0x342	; 0x342 <lcd_putc>
 35e:	89 91       	ld	r24, Y+
 360:	81 11       	cpse	r24, r1
 362:	fb cf       	rjmp	.-10     	; 0x35a <lcd_puts+0x10>
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <lcd_init>:
 36a:	cf 93       	push	r28
 36c:	c8 2f       	mov	r28, r24
 36e:	20 9a       	sbi	0x04, 0	; 4
 370:	55 9a       	sbi	0x0a, 5	; 10
 372:	21 9a       	sbi	0x04, 1	; 4
 374:	54 9a       	sbi	0x0a, 4	; 10
 376:	55 9a       	sbi	0x0a, 5	; 10
 378:	56 9a       	sbi	0x0a, 6	; 10
 37a:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	99 ef       	ldi	r25, 0xF9	; 249
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <lcd_init+0x16>
 384:	00 c0       	rjmp	.+0      	; 0x386 <lcd_init+0x1c>
 386:	00 00       	nop
 388:	5d 9a       	sbi	0x0b, 5	; 11
 38a:	5c 9a       	sbi	0x0b, 4	; 11
 38c:	0e 94 48 01 	call	0x290	; 0x290 <toggle_e>
 390:	8f e1       	ldi	r24, 0x1F	; 31
 392:	9e e4       	ldi	r25, 0x4E	; 78
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <lcd_init+0x2a>
 398:	00 c0       	rjmp	.+0      	; 0x39a <lcd_init+0x30>
 39a:	00 00       	nop
 39c:	0e 94 48 01 	call	0x290	; 0x290 <toggle_e>
 3a0:	8f ef       	ldi	r24, 0xFF	; 255
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <lcd_init+0x3a>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <lcd_init+0x40>
 3aa:	00 00       	nop
 3ac:	0e 94 48 01 	call	0x290	; 0x290 <toggle_e>
 3b0:	8f ef       	ldi	r24, 0xFF	; 255
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <lcd_init+0x4a>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <lcd_init+0x50>
 3ba:	00 00       	nop
 3bc:	5c 98       	cbi	0x0b, 4	; 11
 3be:	0e 94 48 01 	call	0x290	; 0x290 <toggle_e>
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	f1 f7       	brne	.-4      	; 0x3c6 <lcd_init+0x5c>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <lcd_init+0x62>
 3cc:	00 00       	nop
 3ce:	88 e2       	ldi	r24, 0x28	; 40
 3d0:	0e 94 83 01 	call	0x306	; 0x306 <lcd_command>
 3d4:	88 e0       	ldi	r24, 0x08	; 8
 3d6:	0e 94 83 01 	call	0x306	; 0x306 <lcd_command>
 3da:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_clrscr>
 3de:	86 e0       	ldi	r24, 0x06	; 6
 3e0:	0e 94 83 01 	call	0x306	; 0x306 <lcd_command>
 3e4:	8c 2f       	mov	r24, r28
 3e6:	0e 94 83 01 	call	0x306	; 0x306 <lcd_command>
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <__vector_13>:
	}
}

// Interrupt Handler for creating 5s and 3s timers
ISR(TIMER1_OVF_vect)
{
 3ee:	1f 92       	push	r1
 3f0:	0f 92       	push	r0
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	2f 93       	push	r18
 3fa:	3f 93       	push	r19
 3fc:	4f 93       	push	r20
 3fe:	5f 93       	push	r21
 400:	6f 93       	push	r22
 402:	7f 93       	push	r23
 404:	8f 93       	push	r24
 406:	9f 93       	push	r25
 408:	af 93       	push	r26
 40a:	bf 93       	push	r27
 40c:	ef 93       	push	r30
 40e:	ff 93       	push	r31
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	00 d0       	rcall	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 416:	cd b7       	in	r28, 0x3d	; 61
 418:	de b7       	in	r29, 0x3e	; 62
	char string1[2] = "  ";
 41a:	80 e2       	ldi	r24, 0x20	; 32
 41c:	90 e2       	ldi	r25, 0x20	; 32
 41e:	9a 83       	std	Y+2, r25	; 0x02
 420:	89 83       	std	Y+1, r24	; 0x01
	
	// Standby status for the counter
	if(timerStage == 0)
 422:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <timerStage>
 426:	81 11       	cpse	r24, r1
 428:	03 c0       	rjmp	.+6      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
		timerCnt = 0;	
 42a:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <timerCnt>
 42e:	4d c0       	rjmp	.+154    	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
	// 5s Count
	else if(timerStage == 1)
 430:	81 30       	cpi	r24, 0x01	; 1
 432:	29 f5       	brne	.+74     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	{
		timerCnt++;
 434:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <timerCnt>
 438:	8f 5f       	subi	r24, 0xFF	; 255
		if(timerCnt >= 6)
 43a:	86 30       	cpi	r24, 0x06	; 6
 43c:	18 f4       	brcc	.+6      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	if(timerStage == 0)
		timerCnt = 0;	
	// 5s Count
	else if(timerStage == 1)
	{
		timerCnt++;
 43e:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <timerCnt>
 442:	04 c0       	rjmp	.+8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
		if(timerCnt >= 6)
		{
			timerCnt = 0;
 444:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <timerCnt>
			timerStage = 0;
 448:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <timerStage>
		}
		
		// Configure LCD
		lcd_gotoxy(2,0);
 44c:	60 e0       	ldi	r22, 0x00	; 0
 44e:	82 e0       	ldi	r24, 0x02	; 2
 450:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_gotoxy>
		lcd_puts("Remaining time: ");
 454:	89 e1       	ldi	r24, 0x19	; 25
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 45c:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <timerCnt>
 460:	4a e0       	ldi	r20, 0x0A	; 10
 462:	be 01       	movw	r22, r28
 464:	6f 5f       	subi	r22, 0xFF	; 255
 466:	7f 4f       	sbci	r23, 0xFF	; 255
 468:	26 e0       	ldi	r18, 0x06	; 6
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	f9 01       	movw	r30, r18
 46e:	e9 1b       	sub	r30, r25
 470:	f1 09       	sbc	r31, r1
 472:	cf 01       	movw	r24, r30
 474:	0e 94 05 06 	call	0xc0a	; 0xc0a <__itoa_ncheck>
		lcd_puts(itoa((6-timerCnt), string1, 10));
 478:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puts>
 47c:	26 c0       	rjmp	.+76     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
	}
	// 3s Count
	else if(timerStage == 2)
 47e:	82 30       	cpi	r24, 0x02	; 2
 480:	21 f5       	brne	.+72     	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
	{
		timerCnt++;
 482:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <timerCnt>
 486:	8f 5f       	subi	r24, 0xFF	; 255
		if(timerCnt >= 4)
 488:	84 30       	cpi	r24, 0x04	; 4
 48a:	18 f4       	brcc	.+6      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		lcd_puts(itoa((6-timerCnt), string1, 10));
	}
	// 3s Count
	else if(timerStage == 2)
	{
		timerCnt++;
 48c:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <timerCnt>
 490:	04 c0       	rjmp	.+8      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
		if(timerCnt >= 4)
		{
			timerCnt = 0;
 492:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <timerCnt>
			timerStage = 0;
 496:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <timerStage>
		}
		
		// Configure LCD
		lcd_gotoxy(2,0);
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_gotoxy>
		lcd_puts("Remaining time: ");
 4a2:	89 e1       	ldi	r24, 0x19	; 25
 4a4:	91 e0       	ldi	r25, 0x01	; 1
 4a6:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puts>
 4aa:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <timerCnt>
 4ae:	4a e0       	ldi	r20, 0x0A	; 10
 4b0:	be 01       	movw	r22, r28
 4b2:	6f 5f       	subi	r22, 0xFF	; 255
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255
 4b6:	24 e0       	ldi	r18, 0x04	; 4
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	f9 01       	movw	r30, r18
 4bc:	e9 1b       	sub	r30, r25
 4be:	f1 09       	sbc	r31, r1
 4c0:	cf 01       	movw	r24, r30
 4c2:	0e 94 05 06 	call	0xc0a	; 0xc0a <__itoa_ncheck>
		lcd_puts(itoa((4-timerCnt), string1, 10));
 4c6:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puts>
	}
}
 4ca:	0f 90       	pop	r0
 4cc:	0f 90       	pop	r0
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <__vector_9>:

// Interrupt Handler for creating PWM signals for buzzers
ISR(TIMER2_OVF_vect)
{
 4f4:	1f 92       	push	r1
 4f6:	0f 92       	push	r0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	2f 93       	push	r18
 500:	3f 93       	push	r19
 502:	4f 93       	push	r20
 504:	5f 93       	push	r21
 506:	6f 93       	push	r22
 508:	7f 93       	push	r23
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	af 93       	push	r26
 510:	bf 93       	push	r27
 512:	ef 93       	push	r30
 514:	ff 93       	push	r31
	volatile static uint8_t buzzerCnt = 0;
	
	// Buzzer at standby
	if(buzzerStage == 0)
 516:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <buzzerStage>
 51a:	81 11       	cpse	r24, r1
 51c:	0b c0       	rjmp	.+22     	; 0x534 <__vector_9+0x40>
	{
		GPIO_write_low(&PORTB, Buzzer);
 51e:	65 e0       	ldi	r22, 0x05	; 5
 520:	85 e2       	ldi	r24, 0x25	; 37
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
		GPIO_write_low(&PORTB, doorBell);
 528:	64 e0       	ldi	r22, 0x04	; 4
 52a:	85 e2       	ldi	r24, 0x25	; 37
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
 532:	ea c0       	rjmp	.+468    	; 0x708 <__vector_9+0x214>
	}
	
	// Button press buzzer
	else if(buzzerStage == 1)
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	a1 f4       	brne	.+40     	; 0x560 <__vector_9+0x6c>
	{
		GPIO_write_high(&PORTB, Buzzer);
 538:	65 e0       	ldi	r22, 0x05	; 5
 53a:	85 e2       	ldi	r24, 0x25	; 37
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
		
		buzzerCnt++;
 542:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 546:	8f 5f       	subi	r24, 0xFF	; 255
 548:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buzzerCnt.2019>
		if(buzzerCnt == 10)
 54c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 550:	8a 30       	cpi	r24, 0x0A	; 10
 552:	09 f0       	breq	.+2      	; 0x556 <__vector_9+0x62>
 554:	d9 c0       	rjmp	.+434    	; 0x708 <__vector_9+0x214>
		{
			buzzerCnt = 0;
 556:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <buzzerCnt.2019>
			buzzerStage = 0;
 55a:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <buzzerStage>
 55e:	d4 c0       	rjmp	.+424    	; 0x708 <__vector_9+0x214>
		}
	}
	// Correct Pin Buzzer
	else if(buzzerStage == 2)
 560:	82 30       	cpi	r24, 0x02	; 2
 562:	a1 f4       	brne	.+40     	; 0x58c <__vector_9+0x98>
	{
		GPIO_write_high(&PORTB, Buzzer);
 564:	65 e0       	ldi	r22, 0x05	; 5
 566:	85 e2       	ldi	r24, 0x25	; 37
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
		
		buzzerCnt++;
 56e:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 572:	8f 5f       	subi	r24, 0xFF	; 255
 574:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buzzerCnt.2019>
		if(buzzerCnt == 50)
 578:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 57c:	82 33       	cpi	r24, 0x32	; 50
 57e:	09 f0       	breq	.+2      	; 0x582 <__vector_9+0x8e>
 580:	c3 c0       	rjmp	.+390    	; 0x708 <__vector_9+0x214>
		{
			buzzerCnt = 0;
 582:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <buzzerCnt.2019>
			buzzerStage = 0;
 586:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <buzzerStage>
 58a:	be c0       	rjmp	.+380    	; 0x708 <__vector_9+0x214>
		}
	}
	// Wrong Pin Buzzer
	else if(buzzerStage == 3)
 58c:	83 30       	cpi	r24, 0x03	; 3
 58e:	49 f5       	brne	.+82     	; 0x5e2 <__vector_9+0xee>
	{
		GPIO_write_high(&PORTB, Buzzer);
 590:	65 e0       	ldi	r22, 0x05	; 5
 592:	85 e2       	ldi	r24, 0x25	; 37
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
		
		buzzerCnt++;
 59a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 59e:	8f 5f       	subi	r24, 0xFF	; 255
 5a0:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buzzerCnt.2019>
		if((buzzerCnt % 10) == 0)
 5a4:	20 91 29 02 	lds	r18, 0x0229	; 0x800229 <buzzerCnt.2019>
 5a8:	8d ec       	ldi	r24, 0xCD	; 205
 5aa:	28 9f       	mul	r18, r24
 5ac:	81 2d       	mov	r24, r1
 5ae:	11 24       	eor	r1, r1
 5b0:	86 95       	lsr	r24
 5b2:	86 95       	lsr	r24
 5b4:	86 95       	lsr	r24
 5b6:	88 0f       	add	r24, r24
 5b8:	98 2f       	mov	r25, r24
 5ba:	99 0f       	add	r25, r25
 5bc:	99 0f       	add	r25, r25
 5be:	89 0f       	add	r24, r25
 5c0:	28 13       	cpse	r18, r24
 5c2:	05 c0       	rjmp	.+10     	; 0x5ce <__vector_9+0xda>
		{
			GPIO_toggle(&PORTB, Buzzer);
 5c4:	65 e0       	ldi	r22, 0x05	; 5
 5c6:	85 e2       	ldi	r24, 0x25	; 37
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
		}
		if(buzzerCnt == 50)
 5ce:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 5d2:	82 33       	cpi	r24, 0x32	; 50
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <__vector_9+0xe4>
 5d6:	98 c0       	rjmp	.+304    	; 0x708 <__vector_9+0x214>
		{
			buzzerCnt = 0;
 5d8:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <buzzerCnt.2019>
			buzzerStage = 0;
 5dc:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <buzzerStage>
 5e0:	93 c0       	rjmp	.+294    	; 0x708 <__vector_9+0x214>
		}
	}
	// Door Bell Buzzer
	else if(buzzerStage == 4)
 5e2:	84 30       	cpi	r24, 0x04	; 4
 5e4:	09 f0       	breq	.+2      	; 0x5e8 <__vector_9+0xf4>
 5e6:	90 c0       	rjmp	.+288    	; 0x708 <__vector_9+0x214>
	{
		GPIO_write_high(&PORTB, doorBell);
 5e8:	64 e0       	ldi	r22, 0x04	; 4
 5ea:	85 e2       	ldi	r24, 0x25	; 37
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
		
		buzzerCnt++;
 5f2:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 5f6:	8f 5f       	subi	r24, 0xFF	; 255
 5f8:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buzzerCnt.2019>
		if(buzzerCnt == 10)
 5fc:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 600:	8a 30       	cpi	r24, 0x0A	; 10
 602:	29 f4       	brne	.+10     	; 0x60e <__vector_9+0x11a>
			GPIO_toggle(&PORTB, doorBell);
 604:	64 e0       	ldi	r22, 0x04	; 4
 606:	85 e2       	ldi	r24, 0x25	; 37
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
		if(buzzerCnt == 15)
 60e:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 612:	8f 30       	cpi	r24, 0x0F	; 15
 614:	29 f4       	brne	.+10     	; 0x620 <__vector_9+0x12c>
			GPIO_toggle(&PORTB, doorBell);
 616:	64 e0       	ldi	r22, 0x04	; 4
 618:	85 e2       	ldi	r24, 0x25	; 37
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
		if(buzzerCnt == 20)
 620:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 624:	84 31       	cpi	r24, 0x14	; 20
 626:	29 f4       	brne	.+10     	; 0x632 <__vector_9+0x13e>
			GPIO_toggle(&PORTB, doorBell);
 628:	64 e0       	ldi	r22, 0x04	; 4
 62a:	85 e2       	ldi	r24, 0x25	; 37
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
		if(buzzerCnt == 30)
 632:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 636:	8e 31       	cpi	r24, 0x1E	; 30
 638:	29 f4       	brne	.+10     	; 0x644 <__vector_9+0x150>
			GPIO_toggle(&PORTB, doorBell);
 63a:	64 e0       	ldi	r22, 0x04	; 4
 63c:	85 e2       	ldi	r24, 0x25	; 37
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
		if(buzzerCnt == 35)
 644:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 648:	83 32       	cpi	r24, 0x23	; 35
 64a:	29 f4       	brne	.+10     	; 0x656 <__vector_9+0x162>
			GPIO_toggle(&PORTB, doorBell);
 64c:	64 e0       	ldi	r22, 0x04	; 4
 64e:	85 e2       	ldi	r24, 0x25	; 37
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
		if(buzzerCnt == 40)
 656:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 65a:	88 32       	cpi	r24, 0x28	; 40
 65c:	29 f4       	brne	.+10     	; 0x668 <__vector_9+0x174>
			GPIO_toggle(&PORTB, doorBell);
 65e:	64 e0       	ldi	r22, 0x04	; 4
 660:	85 e2       	ldi	r24, 0x25	; 37
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
		if(buzzerCnt == 50)
 668:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 66c:	82 33       	cpi	r24, 0x32	; 50
 66e:	29 f4       	brne	.+10     	; 0x67a <__vector_9+0x186>
			GPIO_toggle(&PORTB, doorBell);
 670:	64 e0       	ldi	r22, 0x04	; 4
 672:	85 e2       	ldi	r24, 0x25	; 37
 674:	90 e0       	ldi	r25, 0x00	; 0
 676:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
		if(buzzerCnt == 60)
 67a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 67e:	8c 33       	cpi	r24, 0x3C	; 60
 680:	29 f4       	brne	.+10     	; 0x68c <__vector_9+0x198>
			GPIO_toggle(&PORTB, doorBell);
 682:	64 e0       	ldi	r22, 0x04	; 4
 684:	85 e2       	ldi	r24, 0x25	; 37
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
		if(buzzerCnt == 65)
 68c:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 690:	81 34       	cpi	r24, 0x41	; 65
 692:	29 f4       	brne	.+10     	; 0x69e <__vector_9+0x1aa>
			GPIO_toggle(&PORTB, doorBell);
 694:	64 e0       	ldi	r22, 0x04	; 4
 696:	85 e2       	ldi	r24, 0x25	; 37
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
		if(buzzerCnt == 70)
 69e:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 6a2:	86 34       	cpi	r24, 0x46	; 70
 6a4:	29 f4       	brne	.+10     	; 0x6b0 <__vector_9+0x1bc>
			GPIO_toggle(&PORTB, doorBell);
 6a6:	64 e0       	ldi	r22, 0x04	; 4
 6a8:	85 e2       	ldi	r24, 0x25	; 37
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
		if(buzzerCnt == 80)
 6b0:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 6b4:	80 35       	cpi	r24, 0x50	; 80
 6b6:	29 f4       	brne	.+10     	; 0x6c2 <__vector_9+0x1ce>
			GPIO_toggle(&PORTB, doorBell);
 6b8:	64 e0       	ldi	r22, 0x04	; 4
 6ba:	85 e2       	ldi	r24, 0x25	; 37
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
		if(buzzerCnt == 85)
 6c2:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 6c6:	85 35       	cpi	r24, 0x55	; 85
 6c8:	29 f4       	brne	.+10     	; 0x6d4 <__vector_9+0x1e0>
			GPIO_toggle(&PORTB, doorBell);
 6ca:	64 e0       	ldi	r22, 0x04	; 4
 6cc:	85 e2       	ldi	r24, 0x25	; 37
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
		if(buzzerCnt == 90)
 6d4:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 6d8:	8a 35       	cpi	r24, 0x5A	; 90
 6da:	29 f4       	brne	.+10     	; 0x6e6 <__vector_9+0x1f2>
			GPIO_toggle(&PORTB, doorBell);
 6dc:	64 e0       	ldi	r22, 0x04	; 4
 6de:	85 e2       	ldi	r24, 0x25	; 37
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
		if(buzzerCnt == 100)
 6e6:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 6ea:	84 36       	cpi	r24, 0x64	; 100
 6ec:	29 f4       	brne	.+10     	; 0x6f8 <__vector_9+0x204>
			GPIO_toggle(&PORTB, doorBell);
 6ee:	64 e0       	ldi	r22, 0x04	; 4
 6f0:	85 e2       	ldi	r24, 0x25	; 37
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_toggle>
			
		if(buzzerCnt == 100)
 6f8:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 6fc:	84 36       	cpi	r24, 0x64	; 100
 6fe:	21 f4       	brne	.+8      	; 0x708 <__vector_9+0x214>
		{
			buzzerCnt = 0;
 700:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <buzzerCnt.2019>
			buzzerStage = 0;
 704:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <buzzerStage>
		}
	}
}
 708:	ff 91       	pop	r31
 70a:	ef 91       	pop	r30
 70c:	bf 91       	pop	r27
 70e:	af 91       	pop	r26
 710:	9f 91       	pop	r25
 712:	8f 91       	pop	r24
 714:	7f 91       	pop	r23
 716:	6f 91       	pop	r22
 718:	5f 91       	pop	r21
 71a:	4f 91       	pop	r20
 71c:	3f 91       	pop	r19
 71e:	2f 91       	pop	r18
 720:	0f 90       	pop	r0
 722:	0f be       	out	0x3f, r0	; 63
 724:	0f 90       	pop	r0
 726:	1f 90       	pop	r1
 728:	18 95       	reti

0000072a <standby>:
/* Function definitions ----------------------------------------------*/
void standby()
{
	// Reset input ID
	inID = -1;
 72a:	8f ef       	ldi	r24, 0xFF	; 255
 72c:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <inID>
	
	// Reset typed pin
	inPin[0] = ' ';
 730:	e5 e1       	ldi	r30, 0x15	; 21
 732:	f1 e0       	ldi	r31, 0x01	; 1
 734:	80 e2       	ldi	r24, 0x20	; 32
 736:	80 83       	st	Z, r24
	inPin[1] = ' ';
 738:	81 83       	std	Z+1, r24	; 0x01
	inPin[2] = ' ';
 73a:	82 83       	std	Z+2, r24	; 0x02
	inPin[3] = ' ';
 73c:	83 83       	std	Z+3, r24	; 0x03
	
	// Reset Leds
	GPIO_write_low(&PORTB, greenLed);
 73e:	67 e0       	ldi	r22, 0x07	; 7
 740:	85 e2       	ldi	r24, 0x25	; 37
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	GPIO_write_low(&PORTB, redLed);
 748:	66 e0       	ldi	r22, 0x06	; 6
 74a:	85 e2       	ldi	r24, 0x25	; 37
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Lock the door
	GPIO_write_low(&PORTB, Relay);
 752:	63 e0       	ldi	r22, 0x03	; 3
 754:	85 e2       	ldi	r24, 0x25	; 37
 756:	90 e0       	ldi	r25, 0x00	; 0
 758:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Clear the lcd screen
	lcd_clrscr();
 75c:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_clrscr>
	// Print to lcd screen
	lcd_gotoxy(2,0);
 760:	60 e0       	ldi	r22, 0x00	; 0
 762:	82 e0       	ldi	r24, 0x02	; 2
 764:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_gotoxy>
	lcd_puts("Dumbledoor wishes");
 768:	8a e2       	ldi	r24, 0x2A	; 42
 76a:	91 e0       	ldi	r25, 0x01	; 1
 76c:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puts>
	lcd_gotoxy(4,1);
 770:	61 e0       	ldi	r22, 0x01	; 1
 772:	84 e0       	ldi	r24, 0x04	; 4
 774:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_gotoxy>
	lcd_puts("Magical Days!");
 778:	8c e3       	ldi	r24, 0x3C	; 60
 77a:	91 e0       	ldi	r25, 0x01	; 1
 77c:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puts>
	lcd_gotoxy(1,2);
 780:	62 e0       	ldi	r22, 0x02	; 2
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_gotoxy>
	lcd_puts("* --> Enter the pin");
 788:	8a e4       	ldi	r24, 0x4A	; 74
 78a:	91 e0       	ldi	r25, 0x01	; 1
 78c:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puts>
	lcd_gotoxy(1,3);
 790:	63 e0       	ldi	r22, 0x03	; 3
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_gotoxy>
	lcd_puts("# --> Door Bell");
 798:	8e e5       	ldi	r24, 0x5E	; 94
 79a:	91 e0       	ldi	r25, 0x01	; 1
 79c:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puts>
 7a0:	08 95       	ret

000007a2 <main>:
						};

int main(void)
{
	// Initialize the LCD Display
	lcd_init(LCD_DISP_ON);
 7a2:	8c e0       	ldi	r24, 0x0C	; 12
 7a4:	0e 94 b5 01 	call	0x36a	; 0x36a <lcd_init>
	
	// Initialize the Key Pad
	keypad_init();
 7a8:	0e 94 a0 00 	call	0x140	; 0x140 <keypad_init>

	// Configure the Leds as output and set low
	GPIO_config_output(&DDRB, greenLed);
 7ac:	67 e0       	ldi	r22, 0x07	; 7
 7ae:	84 e2       	ldi	r24, 0x24	; 36
 7b0:	90 e0       	ldi	r25, 0x00	; 0
 7b2:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB, redLed);
 7b6:	66 e0       	ldi	r22, 0x06	; 6
 7b8:	84 e2       	ldi	r24, 0x24	; 36
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, greenLed);
 7c0:	67 e0       	ldi	r22, 0x07	; 7
 7c2:	85 e2       	ldi	r24, 0x25	; 37
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	GPIO_write_low(&PORTB, redLed);	
 7ca:	66 e0       	ldi	r22, 0x06	; 6
 7cc:	85 e2       	ldi	r24, 0x25	; 37
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Configure the buzzer as output and set low
	GPIO_config_output(&DDRB, Buzzer);
 7d4:	65 e0       	ldi	r22, 0x05	; 5
 7d6:	84 e2       	ldi	r24, 0x24	; 36
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, Buzzer);
 7de:	65 e0       	ldi	r22, 0x05	; 5
 7e0:	85 e2       	ldi	r24, 0x25	; 37
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Configure the doorbell as output and set low
	GPIO_config_output(&DDRB, doorBell);
 7e8:	64 e0       	ldi	r22, 0x04	; 4
 7ea:	84 e2       	ldi	r24, 0x24	; 36
 7ec:	90 e0       	ldi	r25, 0x00	; 0
 7ee:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, doorBell);
 7f2:	64 e0       	ldi	r22, 0x04	; 4
 7f4:	85 e2       	ldi	r24, 0x25	; 37
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Configure Relay as output and set low
	GPIO_config_output(&DDRB, Relay);
 7fc:	63 e0       	ldi	r22, 0x03	; 3
 7fe:	84 e2       	ldi	r24, 0x24	; 36
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, Relay);	
 806:	63 e0       	ldi	r22, 0x03	; 3
 808:	85 e2       	ldi	r24, 0x25	; 37
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Set the program to standby state
	standby();
 810:	0e 94 95 03 	call	0x72a	; 0x72a <standby>
	
    // Configure Timer/Counter0 for scanning the key pad
    // Enable interrupt and set the overflow prescaler to 4ms
    TIM0_overflow_4ms();
 814:	85 b5       	in	r24, 0x25	; 37
 816:	8d 7f       	andi	r24, 0xFD	; 253
 818:	85 bd       	out	0x25, r24	; 37
 81a:	85 b5       	in	r24, 0x25	; 37
 81c:	84 60       	ori	r24, 0x04	; 4
 81e:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 820:	ee e6       	ldi	r30, 0x6E	; 110
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 81       	ld	r24, Z
 826:	81 60       	ori	r24, 0x01	; 1
 828:	80 83       	st	Z, r24
	
	// Configure Timer/Counter1 for creating delays
	// Enable interrupt and set the overflow prescaler to 1s
	TIM1_overflow_1s();
 82a:	e1 e8       	ldi	r30, 0x81	; 129
 82c:	f0 e0       	ldi	r31, 0x00	; 0
 82e:	80 81       	ld	r24, Z
 830:	8c 7f       	andi	r24, 0xFC	; 252
 832:	80 83       	st	Z, r24
 834:	80 81       	ld	r24, Z
 836:	84 60       	ori	r24, 0x04	; 4
 838:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 83a:	ef e6       	ldi	r30, 0x6F	; 111
 83c:	f0 e0       	ldi	r31, 0x00	; 0
 83e:	80 81       	ld	r24, Z
 840:	81 60       	ori	r24, 0x01	; 1
 842:	80 83       	st	Z, r24
	
	// Configure Timer/Counter2 to control and send PWM signals to buzzers
	// Enable interrupt and set the overflow prescaler to 16ms
	TIM2_overflow_16ms();
 844:	e1 eb       	ldi	r30, 0xB1	; 177
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	80 81       	ld	r24, Z
 84a:	87 60       	ori	r24, 0x07	; 7
 84c:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 84e:	e0 e7       	ldi	r30, 0x70	; 112
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	80 81       	ld	r24, Z
 854:	81 60       	ori	r24, 0x01	; 1
 856:	80 83       	st	Z, r24
	
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 858:	89 e0       	ldi	r24, 0x09	; 9
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	0e 94 c8 05 	call	0xb90	; 0xb90 <uart_init>
	
    // Enables interrupts by setting the global interrupt mask
    sei();
 860:	78 94       	sei
 862:	ff cf       	rjmp	.-2      	; 0x862 <main+0xc0>

00000864 <ringDoorBell>:
}

void ringDoorBell() 
{	
	// Correct Pin Buzzer
	buzzerStage = 4;
 864:	84 e0       	ldi	r24, 0x04	; 4
 866:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <buzzerStage>
	
	// Clear the lcd screen
	lcd_clrscr();
 86a:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_clrscr>
	// Print to lcd screen
	lcd_gotoxy(0,2);
 86e:	62 e0       	ldi	r22, 0x02	; 2
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_gotoxy>
	lcd_puts("Door bell is ringed");
 876:	8e e6       	ldi	r24, 0x6E	; 110
 878:	91 e0       	ldi	r25, 0x01	; 1
 87a:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puts>
 87e:	08 95       	ret

00000880 <correctPin>:
}

void correctPin(uint8_t ID)
{	
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	c8 2f       	mov	r28, r24
	// Unlock the door
	GPIO_write_high(&PORTB, Relay);	
 886:	63 e0       	ldi	r22, 0x03	; 3
 888:	85 e2       	ldi	r24, 0x25	; 37
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>

	// Light up the green led
	GPIO_write_high(&PORTB, greenLed);
 890:	67 e0       	ldi	r22, 0x07	; 7
 892:	85 e2       	ldi	r24, 0x25	; 37
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	
	// Correct Pin Buzzer
	buzzerStage = 2;
 89a:	82 e0       	ldi	r24, 0x02	; 2
 89c:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <buzzerStage>
	
	// Clear the lcd screen
	lcd_clrscr();
 8a0:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_clrscr>
	// Print to lcd screen
	lcd_gotoxy(0,1);
 8a4:	61 e0       	ldi	r22, 0x01	; 1
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_gotoxy>
	lcd_puts("Correct pin.");
 8ac:	82 e8       	ldi	r24, 0x82	; 130
 8ae:	91 e0       	ldi	r25, 0x01	; 1
 8b0:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puts>
	lcd_gotoxy(0,2);
 8b4:	62 e0       	ldi	r22, 0x02	; 2
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_gotoxy>
	lcd_puts("Hello ");
 8bc:	8f e8       	ldi	r24, 0x8F	; 143
 8be:	91 e0       	ldi	r25, 0x01	; 1
 8c0:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puts>
	lcd_puts(names[ID]);
 8c4:	8d e0       	ldi	r24, 0x0D	; 13
 8c6:	c8 9f       	mul	r28, r24
 8c8:	e0 01       	movw	r28, r0
 8ca:	11 24       	eor	r1, r1
 8cc:	cc 51       	subi	r28, 0x1C	; 28
 8ce:	de 4f       	sbci	r29, 0xFE	; 254
 8d0:	ce 01       	movw	r24, r28
 8d2:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puts>
	
	// UART
	uart_puts(names[ID]);
 8d6:	ce 01       	movw	r24, r28
 8d8:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_puts>
	uart_puts(" entered to the room!");
 8dc:	86 e9       	ldi	r24, 0x96	; 150
 8de:	91 e0       	ldi	r25, 0x01	; 1
 8e0:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_puts>
	uart_puts("\r\n");	
 8e4:	8c ea       	ldi	r24, 0xAC	; 172
 8e6:	91 e0       	ldi	r25, 0x01	; 1
 8e8:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_puts>
}
 8ec:	df 91       	pop	r29
 8ee:	cf 91       	pop	r28
 8f0:	08 95       	ret

000008f2 <wrongPin>:

void wrongPin()
{
	// Light up the red led
	GPIO_write_high(&PORTB, redLed);
 8f2:	66 e0       	ldi	r22, 0x06	; 6
 8f4:	85 e2       	ldi	r24, 0x25	; 37
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	
	// Correct Pin Buzzer
	buzzerStage = 3;
 8fc:	83 e0       	ldi	r24, 0x03	; 3
 8fe:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <buzzerStage>
	
	// Clear the lcd screen
	lcd_clrscr();
 902:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_clrscr>
	// Print to lcd screen
	lcd_gotoxy(2,2);
 906:	62 e0       	ldi	r22, 0x02	; 2
 908:	82 e0       	ldi	r24, 0x02	; 2
 90a:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_gotoxy>
	lcd_puts("Wrong pin.");
 90e:	8f ea       	ldi	r24, 0xAF	; 175
 910:	91 e0       	ldi	r25, 0x01	; 1
 912:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puts>
	
	// UART
	uart_puts("Wrong attempt to enter!");
 916:	8a eb       	ldi	r24, 0xBA	; 186
 918:	91 e0       	ldi	r25, 0x01	; 1
 91a:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_puts>
	uart_puts("\r\n");
 91e:	8c ea       	ldi	r24, 0xAC	; 172
 920:	91 e0       	ldi	r25, 0x01	; 1
 922:	0e 94 f6 05 	call	0xbec	; 0xbec <uart_puts>
 926:	08 95       	ret

00000928 <comparePins>:
}

int8_t comparePins(char input[])
{
 928:	0f 93       	push	r16
 92a:	1f 93       	push	r17
 92c:	cf 93       	push	r28
 92e:	df 93       	push	r29
 930:	ac 01       	movw	r20, r24
	{
		// Compare 4-digit input pin with the registers pin
		// Ex. pi
		for(uint8_t b = 0; b<4; b++)
		{
			if(input[b] == pins[a][b])
 932:	fc 01       	movw	r30, r24
 934:	80 81       	ld	r24, Z
 936:	c8 e1       	ldi	r28, 0x18	; 24
 938:	d2 e0       	ldi	r29, 0x02	; 2
 93a:	08 e2       	ldi	r16, 0x28	; 40
 93c:	12 e0       	ldi	r17, 0x02	; 2
	// pins[0], pins[1], pins[2], pins[3]
	for(uint8_t a = 0; a<4; a++)
	{
		// Compare 4-digit input pin with the registers pin
		// Ex. pi
		for(uint8_t b = 0; b<4; b++)
 93e:	61 e0       	ldi	r22, 0x01	; 1
 940:	0f c0       	rjmp	.+30     	; 0x960 <comparePins+0x38>
 942:	92 2f       	mov	r25, r18
		{
			if(input[b] == pins[a][b])
 944:	3d 91       	ld	r19, X+
 946:	21 91       	ld	r18, Z+
 948:	32 13       	cpse	r19, r18
 94a:	06 c0       	rjmp	.+12     	; 0x958 <comparePins+0x30>
	// pins[0], pins[1], pins[2], pins[3]
	for(uint8_t a = 0; a<4; a++)
	{
		// Compare 4-digit input pin with the registers pin
		// Ex. pi
		for(uint8_t b = 0; b<4; b++)
 94c:	21 e0       	ldi	r18, 0x01	; 1
 94e:	29 0f       	add	r18, r25
 950:	24 30       	cpi	r18, 0x04	; 4
 952:	b9 f7       	brne	.-18     	; 0x942 <comparePins+0x1a>
				pinId = -1;
				break;
			}
		}
		// If an active pin is found, stop comparing
		if(pinId != -1)
 954:	9f 3f       	cpi	r25, 0xFF	; 255
 956:	71 f4       	brne	.+28     	; 0x974 <comparePins+0x4c>
 958:	24 96       	adiw	r28, 0x04	; 4
{
	int8_t pinId = -1;	// Active pin ID, If -1 no active pins

	// Checking each registered pin
	// pins[0], pins[1], pins[2], pins[3]
	for(uint8_t a = 0; a<4; a++)
 95a:	c0 17       	cp	r28, r16
 95c:	d1 07       	cpc	r29, r17
 95e:	49 f0       	breq	.+18     	; 0x972 <comparePins+0x4a>
	{
		// Compare 4-digit input pin with the registers pin
		// Ex. pi
		for(uint8_t b = 0; b<4; b++)
		{
			if(input[b] == pins[a][b])
 960:	98 81       	ld	r25, Y
 962:	89 13       	cpse	r24, r25
 964:	f9 cf       	rjmp	.-14     	; 0x958 <comparePins+0x30>
 966:	da 01       	movw	r26, r20
 968:	11 96       	adiw	r26, 0x01	; 1
 96a:	fe 01       	movw	r30, r28
 96c:	31 96       	adiw	r30, 0x01	; 1
	// pins[0], pins[1], pins[2], pins[3]
	for(uint8_t a = 0; a<4; a++)
	{
		// Compare 4-digit input pin with the registers pin
		// Ex. pi
		for(uint8_t b = 0; b<4; b++)
 96e:	96 2f       	mov	r25, r22
 970:	e9 cf       	rjmp	.-46     	; 0x944 <comparePins+0x1c>
 972:	9f ef       	ldi	r25, 0xFF	; 255
		if(pinId != -1)
		break;
	}
	
	return pinId;
 974:	89 2f       	mov	r24, r25
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	1f 91       	pop	r17
 97c:	0f 91       	pop	r16
 97e:	08 95       	ret

00000980 <__vector_16>:
}

/* Interrupt handlers ------------------------------------------------*/
//	Interrupt Handler for scanning keypad, getting the typed pin and then compare the pin
ISR(TIMER0_OVF_vect)
{
 980:	1f 92       	push	r1
 982:	0f 92       	push	r0
 984:	0f b6       	in	r0, 0x3f	; 63
 986:	0f 92       	push	r0
 988:	11 24       	eor	r1, r1
 98a:	2f 93       	push	r18
 98c:	3f 93       	push	r19
 98e:	4f 93       	push	r20
 990:	5f 93       	push	r21
 992:	6f 93       	push	r22
 994:	7f 93       	push	r23
 996:	8f 93       	push	r24
 998:	9f 93       	push	r25
 99a:	af 93       	push	r26
 99c:	bf 93       	push	r27
 99e:	ef 93       	push	r30
 9a0:	ff 93       	push	r31
	volatile static char pressedKey = ' ';		// Pressed Key
	volatile static uint8_t pinDigitCnt = 0;	// Contains the index value of the pin
	volatile static uint8_t scanningStage = 0;	// Get Pin --> 0: None, 1: getPin, 2: Standby
	
	// Scan the Keypad
	pressedKey = keypad_scan();
 9a2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <keypad_scan>
 9a6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <pressedKey.2005>
	
	// Key Press Buzzer
	if(pressedKey != ' ')
 9aa:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 9ae:	80 32       	cpi	r24, 0x20	; 32
 9b0:	19 f0       	breq	.+6      	; 0x9b8 <__vector_16+0x38>
		buzzerStage = 1;
 9b2:	81 e0       	ldi	r24, 0x01	; 1
 9b4:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <buzzerStage>
	
	// If user pressed #
	if(pressedKey == '#' && scanningStage == 0)
 9b8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 9bc:	83 32       	cpi	r24, 0x23	; 35
 9be:	61 f4       	brne	.+24     	; 0x9d8 <__vector_16+0x58>
 9c0:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <scanningStage.2007>
 9c4:	81 11       	cpse	r24, r1
 9c6:	08 c0       	rjmp	.+16     	; 0x9d8 <__vector_16+0x58>
	{
		ringDoorBell();
 9c8:	0e 94 32 04 	call	0x864	; 0x864 <ringDoorBell>
		// Wait 3s and than standby
		scanningStage = 2;
 9cc:	82 e0       	ldi	r24, 0x02	; 2
 9ce:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <scanningStage.2007>
		timerStage = 2;
 9d2:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <timerStage>
 9d6:	19 c0       	rjmp	.+50     	; 0xa0a <__vector_16+0x8a>
	}
	//If user pressed *
	else if(pressedKey == '*' && scanningStage == 0)
 9d8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 9dc:	8a 32       	cpi	r24, 0x2A	; 42
 9de:	a9 f4       	brne	.+42     	; 0xa0a <__vector_16+0x8a>
 9e0:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <scanningStage.2007>
 9e4:	81 11       	cpse	r24, r1
 9e6:	11 c0       	rjmp	.+34     	; 0xa0a <__vector_16+0x8a>
	{
		scanningStage = 1;			// Enable getPin
 9e8:	81 e0       	ldi	r24, 0x01	; 1
 9ea:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <scanningStage.2007>
		timerStage = 1;		// Start 5 second timer
 9ee:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <timerStage>
		pinDigitCnt = 0;	// Set pin input index to 0
 9f2:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <pinDigitCnt.2006>
						
		// Configure lcd
		lcd_clrscr();
 9f6:	0e 94 9d 01 	call	0x33a	; 0x33a <lcd_clrscr>
		lcd_gotoxy(2,1);
 9fa:	61 e0       	ldi	r22, 0x01	; 1
 9fc:	82 e0       	ldi	r24, 0x02	; 2
 9fe:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_gotoxy>
		lcd_puts("--Enter the pin--");
 a02:	82 ed       	ldi	r24, 0xD2	; 210
 a04:	91 e0       	ldi	r25, 0x01	; 1
 a06:	0e 94 a5 01 	call	0x34a	; 0x34a <lcd_puts>
	}
		
	// If getPin enabled get the typed pin
	if(scanningStage == 1)
 a0a:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <scanningStage.2007>
 a0e:	81 30       	cpi	r24, 0x01	; 1
 a10:	09 f0       	breq	.+2      	; 0xa14 <__vector_16+0x94>
 a12:	46 c0       	rjmp	.+140    	; 0xaa0 <__vector_16+0x120>
	{
		// Scan the entered pin
		if(pressedKey != '*' && pressedKey != '#' && pressedKey!= ' ')
 a14:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 a18:	8a 32       	cpi	r24, 0x2A	; 42
 a1a:	f9 f0       	breq	.+62     	; 0xa5a <__vector_16+0xda>
 a1c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 a20:	83 32       	cpi	r24, 0x23	; 35
 a22:	d9 f0       	breq	.+54     	; 0xa5a <__vector_16+0xda>
 a24:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 a28:	80 32       	cpi	r24, 0x20	; 32
 a2a:	b9 f0       	breq	.+46     	; 0xa5a <__vector_16+0xda>
		{
			// Put the pressed key into inputPin var
			inPin[pinDigitCnt] = pressedKey;
 a2c:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <pinDigitCnt.2006>
 a30:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	eb 5e       	subi	r30, 0xEB	; 235
 a38:	fe 4f       	sbci	r31, 0xFE	; 254
 a3a:	80 83       	st	Z, r24
				
			// Configure lcd
			lcd_gotoxy((pinDigitCnt + 8),2);
 a3c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <pinDigitCnt.2006>
 a40:	62 e0       	ldi	r22, 0x02	; 2
 a42:	88 5f       	subi	r24, 0xF8	; 248
 a44:	0e 94 87 01 	call	0x30e	; 0x30e <lcd_gotoxy>
			lcd_putc(pressedKey);
 a48:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 a4c:	0e 94 a1 01 	call	0x342	; 0x342 <lcd_putc>
				
			// Increase the counter
			pinDigitCnt++;
 a50:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <pinDigitCnt.2006>
 a54:	8f 5f       	subi	r24, 0xFF	; 255
 a56:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <pinDigitCnt.2006>
		}
		
		// If 5s is up or the user typed all the digits of the pin enter here
		// and compare typed pin with the correct ones
		if(timerStage == 0 || pinDigitCnt > 3)
 a5a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <timerStage>
 a5e:	88 23       	and	r24, r24
 a60:	21 f0       	breq	.+8      	; 0xa6a <__vector_16+0xea>
 a62:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <pinDigitCnt.2006>
 a66:	84 30       	cpi	r24, 0x04	; 4
 a68:	40 f1       	brcs	.+80     	; 0xaba <__vector_16+0x13a>
		{	
			// Compare the typed pin and the correct pins
			inID = comparePins(inPin);
 a6a:	85 e1       	ldi	r24, 0x15	; 21
 a6c:	91 e0       	ldi	r25, 0x01	; 1
 a6e:	0e 94 94 04 	call	0x928	; 0x928 <comparePins>
 a72:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <inID>
			
			// If user typed pin before the timer finish stop the timer			
			timerStage = 0;
 a76:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <timerStage>
			timerCnt = 0;
 a7a:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <timerCnt>
			
			// Typed pin is incorrect
			if(inID == -1)
 a7e:	8f 3f       	cpi	r24, 0xFF	; 255
 a80:	19 f4       	brne	.+6      	; 0xa88 <__vector_16+0x108>
			{
				wrongPin();
 a82:	0e 94 79 04 	call	0x8f2	; 0x8f2 <wrongPin>
 a86:	04 c0       	rjmp	.+8      	; 0xa90 <__vector_16+0x110>
			}
			else if(inID >= 0 && inID < 4)
 a88:	84 30       	cpi	r24, 0x04	; 4
 a8a:	10 f4       	brcc	.+4      	; 0xa90 <__vector_16+0x110>
			{
				correctPin(inID);
 a8c:	0e 94 40 04 	call	0x880	; 0x880 <correctPin>
			}
			
			pinDigitCnt = 0;
 a90:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <pinDigitCnt.2006>
			scanningStage = 2;
 a94:	82 e0       	ldi	r24, 0x02	; 2
 a96:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <scanningStage.2007>
			timerStage = 2;
 a9a:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <timerStage>
 a9e:	0d c0       	rjmp	.+26     	; 0xaba <__vector_16+0x13a>
		}
	}
	
	// Changing the status to the standby
	if(scanningStage == 2)
 aa0:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <scanningStage.2007>
 aa4:	82 30       	cpi	r24, 0x02	; 2
 aa6:	59 f4       	brne	.+22     	; 0xabe <__vector_16+0x13e>
	{
		if(timerStage == 0)
 aa8:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <timerStage>
 aac:	81 11       	cpse	r24, r1
 aae:	07 c0       	rjmp	.+14     	; 0xabe <__vector_16+0x13e>
		{
			scanningStage = 0;
 ab0:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <scanningStage.2007>
			standby();
 ab4:	0e 94 95 03 	call	0x72a	; 0x72a <standby>
		}
	}
}
 ab8:	02 c0       	rjmp	.+4      	; 0xabe <__vector_16+0x13e>
			timerStage = 2;
		}
	}
	
	// Changing the status to the standby
	if(scanningStage == 2)
 aba:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <scanningStage.2007>
		{
			scanningStage = 0;
			standby();
		}
	}
}
 abe:	ff 91       	pop	r31
 ac0:	ef 91       	pop	r30
 ac2:	bf 91       	pop	r27
 ac4:	af 91       	pop	r26
 ac6:	9f 91       	pop	r25
 ac8:	8f 91       	pop	r24
 aca:	7f 91       	pop	r23
 acc:	6f 91       	pop	r22
 ace:	5f 91       	pop	r21
 ad0:	4f 91       	pop	r20
 ad2:	3f 91       	pop	r19
 ad4:	2f 91       	pop	r18
 ad6:	0f 90       	pop	r0
 ad8:	0f be       	out	0x3f, r0	; 63
 ada:	0f 90       	pop	r0
 adc:	1f 90       	pop	r1
 ade:	18 95       	reti

00000ae0 <__vector_18>:
 ae0:	1f 92       	push	r1
 ae2:	0f 92       	push	r0
 ae4:	0f b6       	in	r0, 0x3f	; 63
 ae6:	0f 92       	push	r0
 ae8:	11 24       	eor	r1, r1
 aea:	2f 93       	push	r18
 aec:	8f 93       	push	r24
 aee:	9f 93       	push	r25
 af0:	ef 93       	push	r30
 af2:	ff 93       	push	r31
 af4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 af8:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 afc:	8c 71       	andi	r24, 0x1C	; 28
 afe:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <UART_RxHead>
 b02:	ef 5f       	subi	r30, 0xFF	; 255
 b04:	ef 73       	andi	r30, 0x3F	; 63
 b06:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <UART_RxTail>
 b0a:	e9 17       	cp	r30, r25
 b0c:	39 f0       	breq	.+14     	; 0xb1c <__vector_18+0x3c>
 b0e:	e0 93 31 02 	sts	0x0231, r30	; 0x800231 <UART_RxHead>
 b12:	f0 e0       	ldi	r31, 0x00	; 0
 b14:	ec 5c       	subi	r30, 0xCC	; 204
 b16:	fd 4f       	sbci	r31, 0xFD	; 253
 b18:	20 83       	st	Z, r18
 b1a:	01 c0       	rjmp	.+2      	; 0xb1e <__vector_18+0x3e>
 b1c:	82 e0       	ldi	r24, 0x02	; 2
 b1e:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <UART_LastRxError>
 b22:	89 2b       	or	r24, r25
 b24:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <UART_LastRxError>
 b28:	ff 91       	pop	r31
 b2a:	ef 91       	pop	r30
 b2c:	9f 91       	pop	r25
 b2e:	8f 91       	pop	r24
 b30:	2f 91       	pop	r18
 b32:	0f 90       	pop	r0
 b34:	0f be       	out	0x3f, r0	; 63
 b36:	0f 90       	pop	r0
 b38:	1f 90       	pop	r1
 b3a:	18 95       	reti

00000b3c <__vector_19>:
 b3c:	1f 92       	push	r1
 b3e:	0f 92       	push	r0
 b40:	0f b6       	in	r0, 0x3f	; 63
 b42:	0f 92       	push	r0
 b44:	11 24       	eor	r1, r1
 b46:	8f 93       	push	r24
 b48:	9f 93       	push	r25
 b4a:	ef 93       	push	r30
 b4c:	ff 93       	push	r31
 b4e:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <UART_TxHead>
 b52:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <UART_TxTail>
 b56:	98 17       	cp	r25, r24
 b58:	69 f0       	breq	.+26     	; 0xb74 <__vector_19+0x38>
 b5a:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <UART_TxTail>
 b5e:	ef 5f       	subi	r30, 0xFF	; 255
 b60:	ef 73       	andi	r30, 0x3F	; 63
 b62:	e0 93 32 02 	sts	0x0232, r30	; 0x800232 <UART_TxTail>
 b66:	f0 e0       	ldi	r31, 0x00	; 0
 b68:	ec 58       	subi	r30, 0x8C	; 140
 b6a:	fd 4f       	sbci	r31, 0xFD	; 253
 b6c:	80 81       	ld	r24, Z
 b6e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 b72:	05 c0       	rjmp	.+10     	; 0xb7e <__vector_19+0x42>
 b74:	e1 ec       	ldi	r30, 0xC1	; 193
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	80 81       	ld	r24, Z
 b7a:	8f 7d       	andi	r24, 0xDF	; 223
 b7c:	80 83       	st	Z, r24
 b7e:	ff 91       	pop	r31
 b80:	ef 91       	pop	r30
 b82:	9f 91       	pop	r25
 b84:	8f 91       	pop	r24
 b86:	0f 90       	pop	r0
 b88:	0f be       	out	0x3f, r0	; 63
 b8a:	0f 90       	pop	r0
 b8c:	1f 90       	pop	r1
 b8e:	18 95       	reti

00000b90 <uart_init>:
 b90:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <UART_TxHead>
 b94:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <UART_TxTail>
 b98:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <UART_RxHead>
 b9c:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <UART_RxTail>
 ba0:	99 23       	and	r25, r25
 ba2:	1c f4       	brge	.+6      	; 0xbaa <uart_init+0x1a>
 ba4:	22 e0       	ldi	r18, 0x02	; 2
 ba6:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 baa:	90 78       	andi	r25, 0x80	; 128
 bac:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 bb0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 bb4:	88 e9       	ldi	r24, 0x98	; 152
 bb6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 bba:	86 e0       	ldi	r24, 0x06	; 6
 bbc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 bc0:	08 95       	ret

00000bc2 <uart_putc>:
 bc2:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <UART_TxHead>
 bc6:	2f 5f       	subi	r18, 0xFF	; 255
 bc8:	2f 73       	andi	r18, 0x3F	; 63
 bca:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <UART_TxTail>
 bce:	29 17       	cp	r18, r25
 bd0:	e1 f3       	breq	.-8      	; 0xbca <uart_putc+0x8>
 bd2:	e2 2f       	mov	r30, r18
 bd4:	f0 e0       	ldi	r31, 0x00	; 0
 bd6:	ec 58       	subi	r30, 0x8C	; 140
 bd8:	fd 4f       	sbci	r31, 0xFD	; 253
 bda:	80 83       	st	Z, r24
 bdc:	20 93 33 02 	sts	0x0233, r18	; 0x800233 <UART_TxHead>
 be0:	e1 ec       	ldi	r30, 0xC1	; 193
 be2:	f0 e0       	ldi	r31, 0x00	; 0
 be4:	80 81       	ld	r24, Z
 be6:	80 62       	ori	r24, 0x20	; 32
 be8:	80 83       	st	Z, r24
 bea:	08 95       	ret

00000bec <uart_puts>:
 bec:	cf 93       	push	r28
 bee:	df 93       	push	r29
 bf0:	ec 01       	movw	r28, r24
 bf2:	88 81       	ld	r24, Y
 bf4:	88 23       	and	r24, r24
 bf6:	31 f0       	breq	.+12     	; 0xc04 <uart_puts+0x18>
 bf8:	21 96       	adiw	r28, 0x01	; 1
 bfa:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <uart_putc>
 bfe:	89 91       	ld	r24, Y+
 c00:	81 11       	cpse	r24, r1
 c02:	fb cf       	rjmp	.-10     	; 0xbfa <uart_puts+0xe>
 c04:	df 91       	pop	r29
 c06:	cf 91       	pop	r28
 c08:	08 95       	ret

00000c0a <__itoa_ncheck>:
 c0a:	bb 27       	eor	r27, r27
 c0c:	4a 30       	cpi	r20, 0x0A	; 10
 c0e:	31 f4       	brne	.+12     	; 0xc1c <__itoa_ncheck+0x12>
 c10:	99 23       	and	r25, r25
 c12:	22 f4       	brpl	.+8      	; 0xc1c <__itoa_ncheck+0x12>
 c14:	bd e2       	ldi	r27, 0x2D	; 45
 c16:	90 95       	com	r25
 c18:	81 95       	neg	r24
 c1a:	9f 4f       	sbci	r25, 0xFF	; 255
 c1c:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__utoa_common>

00000c20 <__utoa_ncheck>:
 c20:	bb 27       	eor	r27, r27

00000c22 <__utoa_common>:
 c22:	fb 01       	movw	r30, r22
 c24:	55 27       	eor	r21, r21
 c26:	aa 27       	eor	r26, r26
 c28:	88 0f       	add	r24, r24
 c2a:	99 1f       	adc	r25, r25
 c2c:	aa 1f       	adc	r26, r26
 c2e:	a4 17       	cp	r26, r20
 c30:	10 f0       	brcs	.+4      	; 0xc36 <__utoa_common+0x14>
 c32:	a4 1b       	sub	r26, r20
 c34:	83 95       	inc	r24
 c36:	50 51       	subi	r21, 0x10	; 16
 c38:	b9 f7       	brne	.-18     	; 0xc28 <__utoa_common+0x6>
 c3a:	a0 5d       	subi	r26, 0xD0	; 208
 c3c:	aa 33       	cpi	r26, 0x3A	; 58
 c3e:	08 f0       	brcs	.+2      	; 0xc42 <__utoa_common+0x20>
 c40:	a9 5d       	subi	r26, 0xD9	; 217
 c42:	a1 93       	st	Z+, r26
 c44:	00 97       	sbiw	r24, 0x00	; 0
 c46:	79 f7       	brne	.-34     	; 0xc26 <__utoa_common+0x4>
 c48:	b1 11       	cpse	r27, r1
 c4a:	b1 93       	st	Z+, r27
 c4c:	11 92       	st	Z+, r1
 c4e:	cb 01       	movw	r24, r22
 c50:	0c 94 2a 06 	jmp	0xc54	; 0xc54 <strrev>

00000c54 <strrev>:
 c54:	dc 01       	movw	r26, r24
 c56:	fc 01       	movw	r30, r24
 c58:	67 2f       	mov	r22, r23
 c5a:	71 91       	ld	r23, Z+
 c5c:	77 23       	and	r23, r23
 c5e:	e1 f7       	brne	.-8      	; 0xc58 <strrev+0x4>
 c60:	32 97       	sbiw	r30, 0x02	; 2
 c62:	04 c0       	rjmp	.+8      	; 0xc6c <strrev+0x18>
 c64:	7c 91       	ld	r23, X
 c66:	6d 93       	st	X+, r22
 c68:	70 83       	st	Z, r23
 c6a:	62 91       	ld	r22, -Z
 c6c:	ae 17       	cp	r26, r30
 c6e:	bf 07       	cpc	r27, r31
 c70:	c8 f3       	brcs	.-14     	; 0xc64 <strrev+0x10>
 c72:	08 95       	ret

00000c74 <_exit>:
 c74:	f8 94       	cli

00000c76 <__stop_program>:
 c76:	ff cf       	rjmp	.-2      	; 0xc76 <__stop_program>
