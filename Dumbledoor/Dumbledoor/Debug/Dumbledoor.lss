
Dumbledoor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800100  00000ac8  00000b5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ac8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008c  00800228  00800228  00000c84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020cf  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cec  00000000  00000000  00002f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001054  00000000  00000000  00003c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  00004cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000079f  00000000  00000000  00005140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001159  00000000  00000000  000058df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00006a38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 98 04 	jmp	0x930	; 0x930 <__vector_18>
  4c:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ec       	ldi	r30, 0xC8	; 200
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 32       	cpi	r26, 0x28	; 40
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 e2       	ldi	r26, 0x28	; 40
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3b       	cpi	r26, 0xB4	; 180
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <main>
  9e:	0c 94 62 05 	jmp	0xac4	; 0xac4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_pullup>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_pullup+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_pullup+0xa>
  d0:	92 2f       	mov	r25, r18
  d2:	90 95       	com	r25
  d4:	89 23       	and	r24, r25
  d6:	80 83       	st	Z, r24
  d8:	80 81       	ld	r24, Z
  da:	81 81       	ldd	r24, Z+1	; 0x01
  dc:	28 2b       	or	r18, r24
  de:	21 83       	std	Z+1, r18	; 0x01
  e0:	08 95       	ret

000000e2 <GPIO_write_low>:
  e2:	fc 01       	movw	r30, r24
  e4:	90 81       	ld	r25, Z
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <GPIO_write_low+0xe>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <GPIO_write_low+0xa>
  f4:	20 95       	com	r18
  f6:	29 23       	and	r18, r25
  f8:	20 83       	st	Z, r18
  fa:	08 95       	ret

000000fc <GPIO_write_high>:
  fc:	fc 01       	movw	r30, r24
  fe:	40 81       	ld	r20, Z
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <GPIO_write_high+0xe>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <GPIO_write_high+0xa>
 10e:	24 2b       	or	r18, r20
 110:	20 83       	st	Z, r18
 112:	08 95       	ret

00000114 <GPIO_read>:
 114:	fc 01       	movw	r30, r24
 116:	80 81       	ld	r24, Z
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <GPIO_read+0xc>
 11c:	95 95       	asr	r25
 11e:	87 95       	ror	r24
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <GPIO_read+0x8>
 124:	81 70       	andi	r24, 0x01	; 1
 126:	08 95       	ret

00000128 <keypad_init>:
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	87 e2       	ldi	r24, 0x27	; 39
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	87 e2       	ldi	r24, 0x27	; 39
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	87 e2       	ldi	r24, 0x27	; 39
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 146:	60 e0       	ldi	r22, 0x00	; 0
 148:	88 e2       	ldi	r24, 0x28	; 40
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	88 e2       	ldi	r24, 0x28	; 40
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	88 e2       	ldi	r24, 0x28	; 40
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 164:	66 e0       	ldi	r22, 0x06	; 6
 166:	87 e2       	ldi	r24, 0x27	; 39
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
 16e:	65 e0       	ldi	r22, 0x05	; 5
 170:	87 e2       	ldi	r24, 0x27	; 39
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
 178:	64 e0       	ldi	r22, 0x04	; 4
 17a:	87 e2       	ldi	r24, 0x27	; 39
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
 182:	63 e0       	ldi	r22, 0x03	; 3
 184:	87 e2       	ldi	r24, 0x27	; 39
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_pullup>
 18c:	08 95       	ret

0000018e <keypad_scan>:
 18e:	7f 92       	push	r7
 190:	8f 92       	push	r8
 192:	9f 92       	push	r9
 194:	af 92       	push	r10
 196:	bf 92       	push	r11
 198:	cf 92       	push	r12
 19a:	df 92       	push	r13
 19c:	ef 92       	push	r14
 19e:	ff 92       	push	r15
 1a0:	0f 93       	push	r16
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	0f 2e       	mov	r0, r31
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	ef 2e       	mov	r14, r31
 1ae:	f1 e0       	ldi	r31, 0x01	; 1
 1b0:	ff 2e       	mov	r15, r31
 1b2:	f0 2d       	mov	r31, r0
 1b4:	0f 2e       	mov	r0, r31
 1b6:	f7 e0       	ldi	r31, 0x07	; 7
 1b8:	cf 2e       	mov	r12, r31
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	df 2e       	mov	r13, r31
 1be:	f0 2d       	mov	r31, r0
 1c0:	0f 2e       	mov	r0, r31
 1c2:	f3 e0       	ldi	r31, 0x03	; 3
 1c4:	af 2e       	mov	r10, r31
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	bf 2e       	mov	r11, r31
 1ca:	f0 2d       	mov	r31, r0
 1cc:	68 94       	set
 1ce:	77 24       	eor	r7, r7
 1d0:	75 f8       	bld	r7, 5
 1d2:	07 e0       	ldi	r16, 0x07	; 7
 1d4:	11 e0       	ldi	r17, 0x01	; 1
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 1e0:	61 e0       	ldi	r22, 0x01	; 1
 1e2:	88 e2       	ldi	r24, 0x28	; 40
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
 1f4:	f7 01       	movw	r30, r14
 1f6:	61 91       	ld	r22, Z+
 1f8:	7f 01       	movw	r14, r30
 1fa:	88 e2       	ldi	r24, 0x28	; 40
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
 202:	0f 2e       	mov	r0, r31
 204:	f3 e0       	ldi	r31, 0x03	; 3
 206:	8f 2e       	mov	r8, r31
 208:	f1 e0       	ldi	r31, 0x01	; 1
 20a:	9f 2e       	mov	r9, r31
 20c:	f0 2d       	mov	r31, r0
 20e:	e6 01       	movw	r28, r12
 210:	f4 01       	movw	r30, r8
 212:	61 91       	ld	r22, Z+
 214:	4f 01       	movw	r8, r30
 216:	86 e2       	ldi	r24, 0x26	; 38
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 8a 00 	call	0x114	; 0x114 <GPIO_read>
 21e:	81 11       	cpse	r24, r1
 220:	01 c0       	rjmp	.+2      	; 0x224 <keypad_scan+0x96>
 222:	78 80       	ld	r7, Y
 224:	23 96       	adiw	r28, 0x03	; 3
 226:	80 16       	cp	r8, r16
 228:	91 06       	cpc	r9, r17
 22a:	91 f7       	brne	.-28     	; 0x210 <keypad_scan+0x82>
 22c:	f0 e2       	ldi	r31, 0x20	; 32
 22e:	7f 12       	cpse	r7, r31
 230:	0c c0       	rjmp	.+24     	; 0x24a <keypad_scan+0xbc>
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	c8 1a       	sub	r12, r24
 236:	d8 0a       	sbc	r13, r24
 238:	ea 14       	cp	r14, r10
 23a:	fb 04       	cpc	r15, r11
 23c:	61 f6       	brne	.-104    	; 0x1d6 <keypad_scan+0x48>
 23e:	0b c0       	rjmp	.+22     	; 0x256 <keypad_scan+0xc8>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <__data_end>
 246:	87 2d       	mov	r24, r7
 248:	09 c0       	rjmp	.+18     	; 0x25c <keypad_scan+0xce>
 24a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <__data_end>
 24e:	88 23       	and	r24, r24
 250:	b9 f3       	breq	.-18     	; 0x240 <keypad_scan+0xb2>
 252:	80 e2       	ldi	r24, 0x20	; 32
 254:	03 c0       	rjmp	.+6      	; 0x25c <keypad_scan+0xce>
 256:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <__data_end>
 25a:	80 e2       	ldi	r24, 0x20	; 32
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	1f 91       	pop	r17
 262:	0f 91       	pop	r16
 264:	ff 90       	pop	r15
 266:	ef 90       	pop	r14
 268:	df 90       	pop	r13
 26a:	cf 90       	pop	r12
 26c:	bf 90       	pop	r11
 26e:	af 90       	pop	r10
 270:	9f 90       	pop	r9
 272:	8f 90       	pop	r8
 274:	7f 90       	pop	r7
 276:	08 95       	ret

00000278 <toggle_e>:
 278:	29 9a       	sbi	0x05, 1	; 5
 27a:	85 e0       	ldi	r24, 0x05	; 5
 27c:	8a 95       	dec	r24
 27e:	f1 f7       	brne	.-4      	; 0x27c <toggle_e+0x4>
 280:	00 00       	nop
 282:	29 98       	cbi	0x05, 1	; 5
 284:	08 95       	ret

00000286 <lcd_write>:
 286:	cf 93       	push	r28
 288:	c8 2f       	mov	r28, r24
 28a:	66 23       	and	r22, r22
 28c:	11 f0       	breq	.+4      	; 0x292 <lcd_write+0xc>
 28e:	28 9a       	sbi	0x05, 0	; 5
 290:	01 c0       	rjmp	.+2      	; 0x294 <lcd_write+0xe>
 292:	28 98       	cbi	0x05, 0	; 5
 294:	54 9a       	sbi	0x0a, 4	; 10
 296:	55 9a       	sbi	0x0a, 5	; 10
 298:	56 9a       	sbi	0x0a, 6	; 10
 29a:	57 9a       	sbi	0x0a, 7	; 10
 29c:	5f 98       	cbi	0x0b, 7	; 11
 29e:	5e 98       	cbi	0x0b, 6	; 11
 2a0:	5d 98       	cbi	0x0b, 5	; 11
 2a2:	5c 98       	cbi	0x0b, 4	; 11
 2a4:	cc 23       	and	r28, r28
 2a6:	0c f4       	brge	.+2      	; 0x2aa <lcd_write+0x24>
 2a8:	5f 9a       	sbi	0x0b, 7	; 11
 2aa:	c6 fd       	sbrc	r28, 6
 2ac:	5e 9a       	sbi	0x0b, 6	; 11
 2ae:	c5 fd       	sbrc	r28, 5
 2b0:	5d 9a       	sbi	0x0b, 5	; 11
 2b2:	c4 fd       	sbrc	r28, 4
 2b4:	5c 9a       	sbi	0x0b, 4	; 11
 2b6:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 2ba:	5f 98       	cbi	0x0b, 7	; 11
 2bc:	5e 98       	cbi	0x0b, 6	; 11
 2be:	5d 98       	cbi	0x0b, 5	; 11
 2c0:	5c 98       	cbi	0x0b, 4	; 11
 2c2:	c3 fd       	sbrc	r28, 3
 2c4:	5f 9a       	sbi	0x0b, 7	; 11
 2c6:	c2 fd       	sbrc	r28, 2
 2c8:	5e 9a       	sbi	0x0b, 6	; 11
 2ca:	c1 fd       	sbrc	r28, 1
 2cc:	5d 9a       	sbi	0x0b, 5	; 11
 2ce:	c0 fd       	sbrc	r28, 0
 2d0:	5c 9a       	sbi	0x0b, 4	; 11
 2d2:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 2d6:	5c 9a       	sbi	0x0b, 4	; 11
 2d8:	5d 9a       	sbi	0x0b, 5	; 11
 2da:	5e 9a       	sbi	0x0b, 6	; 11
 2dc:	5f 9a       	sbi	0x0b, 7	; 11
 2de:	87 eb       	ldi	r24, 0xB7	; 183
 2e0:	9b e0       	ldi	r25, 0x0B	; 11
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <lcd_write+0x5c>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <lcd_write+0x62>
 2e8:	00 00       	nop
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <lcd_command>:
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	0e 94 43 01 	call	0x286	; 0x286 <lcd_write>
 2f4:	08 95       	ret

000002f6 <lcd_gotoxy>:
 2f6:	61 11       	cpse	r22, r1
 2f8:	04 c0       	rjmp	.+8      	; 0x302 <lcd_gotoxy+0xc>
 2fa:	80 58       	subi	r24, 0x80	; 128
 2fc:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 300:	08 95       	ret
 302:	61 30       	cpi	r22, 0x01	; 1
 304:	21 f4       	brne	.+8      	; 0x30e <lcd_gotoxy+0x18>
 306:	80 54       	subi	r24, 0x40	; 64
 308:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 30c:	08 95       	ret
 30e:	62 30       	cpi	r22, 0x02	; 2
 310:	21 f4       	brne	.+8      	; 0x31a <lcd_gotoxy+0x24>
 312:	8c 56       	subi	r24, 0x6C	; 108
 314:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 318:	08 95       	ret
 31a:	8c 52       	subi	r24, 0x2C	; 44
 31c:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 320:	08 95       	ret

00000322 <lcd_clrscr>:
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 328:	08 95       	ret

0000032a <lcd_putc>:
 32a:	61 e0       	ldi	r22, 0x01	; 1
 32c:	0e 94 43 01 	call	0x286	; 0x286 <lcd_write>
 330:	08 95       	ret

00000332 <lcd_puts>:
 332:	cf 93       	push	r28
 334:	df 93       	push	r29
 336:	ec 01       	movw	r28, r24
 338:	21 96       	adiw	r28, 0x01	; 1
 33a:	fc 01       	movw	r30, r24
 33c:	80 81       	ld	r24, Z
 33e:	88 23       	and	r24, r24
 340:	29 f0       	breq	.+10     	; 0x34c <lcd_puts+0x1a>
 342:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_putc>
 346:	89 91       	ld	r24, Y+
 348:	81 11       	cpse	r24, r1
 34a:	fb cf       	rjmp	.-10     	; 0x342 <lcd_puts+0x10>
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <lcd_init>:
 352:	cf 93       	push	r28
 354:	c8 2f       	mov	r28, r24
 356:	20 9a       	sbi	0x04, 0	; 4
 358:	55 9a       	sbi	0x0a, 5	; 10
 35a:	21 9a       	sbi	0x04, 1	; 4
 35c:	54 9a       	sbi	0x0a, 4	; 10
 35e:	55 9a       	sbi	0x0a, 5	; 10
 360:	56 9a       	sbi	0x0a, 6	; 10
 362:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	99 ef       	ldi	r25, 0xF9	; 249
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <lcd_init+0x16>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <lcd_init+0x1c>
 36e:	00 00       	nop
 370:	5d 9a       	sbi	0x0b, 5	; 11
 372:	5c 9a       	sbi	0x0b, 4	; 11
 374:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 378:	8f e1       	ldi	r24, 0x1F	; 31
 37a:	9e e4       	ldi	r25, 0x4E	; 78
 37c:	01 97       	sbiw	r24, 0x01	; 1
 37e:	f1 f7       	brne	.-4      	; 0x37c <lcd_init+0x2a>
 380:	00 c0       	rjmp	.+0      	; 0x382 <lcd_init+0x30>
 382:	00 00       	nop
 384:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <lcd_init+0x3a>
 390:	00 c0       	rjmp	.+0      	; 0x392 <lcd_init+0x40>
 392:	00 00       	nop
 394:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 398:	8f ef       	ldi	r24, 0xFF	; 255
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <lcd_init+0x4a>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <lcd_init+0x50>
 3a2:	00 00       	nop
 3a4:	5c 98       	cbi	0x0b, 4	; 11
 3a6:	0e 94 3c 01 	call	0x278	; 0x278 <toggle_e>
 3aa:	8f ef       	ldi	r24, 0xFF	; 255
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	01 97       	sbiw	r24, 0x01	; 1
 3b0:	f1 f7       	brne	.-4      	; 0x3ae <lcd_init+0x5c>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <lcd_init+0x62>
 3b4:	00 00       	nop
 3b6:	88 e2       	ldi	r24, 0x28	; 40
 3b8:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 3bc:	88 e0       	ldi	r24, 0x08	; 8
 3be:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 3c2:	0e 94 91 01 	call	0x322	; 0x322 <lcd_clrscr>
 3c6:	86 e0       	ldi	r24, 0x06	; 6
 3c8:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 3cc:	8c 2f       	mov	r24, r28
 3ce:	0e 94 77 01 	call	0x2ee	; 0x2ee <lcd_command>
 3d2:	cf 91       	pop	r28
 3d4:	08 95       	ret

000003d6 <__vector_13>:
	}
}

// Interrupt Handler for creating 5s and 3s timers
ISR(TIMER1_OVF_vect)
{
 3d6:	1f 92       	push	r1
 3d8:	0f 92       	push	r0
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	0f 92       	push	r0
 3de:	11 24       	eor	r1, r1
 3e0:	2f 93       	push	r18
 3e2:	3f 93       	push	r19
 3e4:	4f 93       	push	r20
 3e6:	5f 93       	push	r21
 3e8:	6f 93       	push	r22
 3ea:	7f 93       	push	r23
 3ec:	8f 93       	push	r24
 3ee:	9f 93       	push	r25
 3f0:	af 93       	push	r26
 3f2:	bf 93       	push	r27
 3f4:	ef 93       	push	r30
 3f6:	ff 93       	push	r31
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <__vector_13+0x28>
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
	char string1[2] = "  ";
 402:	80 e2       	ldi	r24, 0x20	; 32
 404:	90 e2       	ldi	r25, 0x20	; 32
 406:	9a 83       	std	Y+2, r25	; 0x02
 408:	89 83       	std	Y+1, r24	; 0x01
	
	// Standby status for the counter
	if(timerStage == 0)
 40a:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <timerStage>
 40e:	81 11       	cpse	r24, r1
 410:	03 c0       	rjmp	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
		timerCnt = 0;	
 412:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <timerCnt>
 416:	4d c0       	rjmp	.+154    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	// 5s Count
	else if(timerStage == 1)
 418:	81 30       	cpi	r24, 0x01	; 1
 41a:	29 f5       	brne	.+74     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	{
		timerCnt++;
 41c:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <timerCnt>
 420:	8f 5f       	subi	r24, 0xFF	; 255
		if(timerCnt >= 6)
 422:	86 30       	cpi	r24, 0x06	; 6
 424:	18 f4       	brcc	.+6      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
	if(timerStage == 0)
		timerCnt = 0;	
	// 5s Count
	else if(timerStage == 1)
	{
		timerCnt++;
 426:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <timerCnt>
 42a:	04 c0       	rjmp	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		if(timerCnt >= 6)
		{
			timerCnt = 0;
 42c:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <timerCnt>
			timerStage = 0;
 430:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <timerStage>
		}
		
		// Configure LCD
		lcd_gotoxy(2,0);
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
		lcd_puts("Remaining time: ");
 43c:	89 e1       	ldi	r24, 0x19	; 25
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 444:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <timerCnt>
 448:	4a e0       	ldi	r20, 0x0A	; 10
 44a:	be 01       	movw	r22, r28
 44c:	6f 5f       	subi	r22, 0xFF	; 255
 44e:	7f 4f       	sbci	r23, 0xFF	; 255
 450:	26 e0       	ldi	r18, 0x06	; 6
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	f9 01       	movw	r30, r18
 456:	e9 1b       	sub	r30, r25
 458:	f1 09       	sbc	r31, r1
 45a:	cf 01       	movw	r24, r30
 45c:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__itoa_ncheck>
		lcd_puts(itoa((6-timerCnt), string1, 10));
 460:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
 464:	26 c0       	rjmp	.+76     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	}
	// 3s Count
	else if(timerStage == 2)
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	21 f5       	brne	.+72     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	{
		timerCnt++;
 46a:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <timerCnt>
 46e:	8f 5f       	subi	r24, 0xFF	; 255
		if(timerCnt >= 4)
 470:	84 30       	cpi	r24, 0x04	; 4
 472:	18 f4       	brcc	.+6      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		lcd_puts(itoa((6-timerCnt), string1, 10));
	}
	// 3s Count
	else if(timerStage == 2)
	{
		timerCnt++;
 474:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <timerCnt>
 478:	04 c0       	rjmp	.+8      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
		if(timerCnt >= 4)
		{
			timerCnt = 0;
 47a:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <timerCnt>
			timerStage = 0;
 47e:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <timerStage>
		}
		
		// Configure LCD
		lcd_gotoxy(2,0);
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
		lcd_puts("Remaining time: ");
 48a:	89 e1       	ldi	r24, 0x19	; 25
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
 492:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <timerCnt>
 496:	4a e0       	ldi	r20, 0x0A	; 10
 498:	be 01       	movw	r22, r28
 49a:	6f 5f       	subi	r22, 0xFF	; 255
 49c:	7f 4f       	sbci	r23, 0xFF	; 255
 49e:	24 e0       	ldi	r18, 0x04	; 4
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	f9 01       	movw	r30, r18
 4a4:	e9 1b       	sub	r30, r25
 4a6:	f1 09       	sbc	r31, r1
 4a8:	cf 01       	movw	r24, r30
 4aa:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__itoa_ncheck>
		lcd_puts(itoa((4-timerCnt), string1, 10));
 4ae:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	}
}
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	ff 91       	pop	r31
 4bc:	ef 91       	pop	r30
 4be:	bf 91       	pop	r27
 4c0:	af 91       	pop	r26
 4c2:	9f 91       	pop	r25
 4c4:	8f 91       	pop	r24
 4c6:	7f 91       	pop	r23
 4c8:	6f 91       	pop	r22
 4ca:	5f 91       	pop	r21
 4cc:	4f 91       	pop	r20
 4ce:	3f 91       	pop	r19
 4d0:	2f 91       	pop	r18
 4d2:	0f 90       	pop	r0
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	0f 90       	pop	r0
 4d8:	1f 90       	pop	r1
 4da:	18 95       	reti

000004dc <__vector_9>:

// Interrupt Handler for creating PWM signals for buzzers
ISR(TIMER2_OVF_vect)
{
 4dc:	1f 92       	push	r1
 4de:	0f 92       	push	r0
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	2f 93       	push	r18
 4e8:	3f 93       	push	r19
 4ea:	4f 93       	push	r20
 4ec:	5f 93       	push	r21
 4ee:	6f 93       	push	r22
 4f0:	7f 93       	push	r23
 4f2:	8f 93       	push	r24
 4f4:	9f 93       	push	r25
 4f6:	af 93       	push	r26
 4f8:	bf 93       	push	r27
 4fa:	ef 93       	push	r30
 4fc:	ff 93       	push	r31
	volatile static uint8_t buzzerCnt = 0;
	
	// Buzzer at standby
	if(buzzerStage == 0)
 4fe:	80 91 2c 02 	lds	r24, 0x022C	; 0x80022c <buzzerStage>
 502:	81 11       	cpse	r24, r1
 504:	06 c0       	rjmp	.+12     	; 0x512 <__vector_9+0x36>
	{
		GPIO_write_low(&PORTB, Buzzer);
 506:	65 e0       	ldi	r22, 0x05	; 5
 508:	85 e2       	ldi	r24, 0x25	; 37
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
 510:	29 c0       	rjmp	.+82     	; 0x564 <__vector_9+0x88>
	}
	
	// Button press buzzer
	else if(buzzerStage == 1)
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	99 f4       	brne	.+38     	; 0x53c <__vector_9+0x60>
	{
		GPIO_write_high(&PORTB, Buzzer);
 516:	65 e0       	ldi	r22, 0x05	; 5
 518:	85 e2       	ldi	r24, 0x25	; 37
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
		
		buzzerCnt++;
 520:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 524:	8f 5f       	subi	r24, 0xFF	; 255
 526:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buzzerCnt.2019>
		if(buzzerCnt == 10)
 52a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 52e:	8a 30       	cpi	r24, 0x0A	; 10
 530:	c9 f4       	brne	.+50     	; 0x564 <__vector_9+0x88>
		{
			buzzerCnt = 0;
 532:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <buzzerCnt.2019>
			buzzerStage = 0;
 536:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <buzzerStage>
 53a:	14 c0       	rjmp	.+40     	; 0x564 <__vector_9+0x88>
		}
	}
	// Correct Pin Buzzer
	else if(buzzerStage == 2)
 53c:	82 30       	cpi	r24, 0x02	; 2
 53e:	91 f4       	brne	.+36     	; 0x564 <__vector_9+0x88>
	{
		GPIO_write_high(&PORTB, Buzzer);
 540:	65 e0       	ldi	r22, 0x05	; 5
 542:	85 e2       	ldi	r24, 0x25	; 37
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
		
		buzzerCnt++;
 54a:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 54e:	8f 5f       	subi	r24, 0xFF	; 255
 550:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <buzzerCnt.2019>
		if(buzzerCnt == 50)
 554:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <buzzerCnt.2019>
 558:	82 33       	cpi	r24, 0x32	; 50
 55a:	21 f4       	brne	.+8      	; 0x564 <__vector_9+0x88>
		{
			buzzerCnt = 0;
 55c:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <buzzerCnt.2019>
			buzzerStage = 0;
 560:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <buzzerStage>
		}
	}
}
 564:	ff 91       	pop	r31
 566:	ef 91       	pop	r30
 568:	bf 91       	pop	r27
 56a:	af 91       	pop	r26
 56c:	9f 91       	pop	r25
 56e:	8f 91       	pop	r24
 570:	7f 91       	pop	r23
 572:	6f 91       	pop	r22
 574:	5f 91       	pop	r21
 576:	4f 91       	pop	r20
 578:	3f 91       	pop	r19
 57a:	2f 91       	pop	r18
 57c:	0f 90       	pop	r0
 57e:	0f be       	out	0x3f, r0	; 63
 580:	0f 90       	pop	r0
 582:	1f 90       	pop	r1
 584:	18 95       	reti

00000586 <standby>:
/* Function definitions ----------------------------------------------*/
void standby()
{
	// Reset input ID
	inID = -1;
 586:	8f ef       	ldi	r24, 0xFF	; 255
 588:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <inID>
	
	// Reset typed pin
	inPin[0] = ' ';
 58c:	e5 e1       	ldi	r30, 0x15	; 21
 58e:	f1 e0       	ldi	r31, 0x01	; 1
 590:	80 e2       	ldi	r24, 0x20	; 32
 592:	80 83       	st	Z, r24
	inPin[1] = ' ';
 594:	81 83       	std	Z+1, r24	; 0x01
	inPin[2] = ' ';
 596:	82 83       	std	Z+2, r24	; 0x02
	inPin[3] = ' ';
 598:	83 83       	std	Z+3, r24	; 0x03
	
	// Reset Leds
	GPIO_write_low(&PORTB, greenLed);
 59a:	67 e0       	ldi	r22, 0x07	; 7
 59c:	85 e2       	ldi	r24, 0x25	; 37
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	GPIO_write_low(&PORTB, redLed);
 5a4:	66 e0       	ldi	r22, 0x06	; 6
 5a6:	85 e2       	ldi	r24, 0x25	; 37
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Lock the door
	GPIO_write_low(&PORTB, Relay);
 5ae:	63 e0       	ldi	r22, 0x03	; 3
 5b0:	85 e2       	ldi	r24, 0x25	; 37
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Clear the lcd screen
	lcd_clrscr();
 5b8:	0e 94 91 01 	call	0x322	; 0x322 <lcd_clrscr>
	// Print to lcd screen
	lcd_gotoxy(2,0);
 5bc:	60 e0       	ldi	r22, 0x00	; 0
 5be:	82 e0       	ldi	r24, 0x02	; 2
 5c0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
	lcd_puts("Dumbledoor wishes");
 5c4:	8a e2       	ldi	r24, 0x2A	; 42
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	lcd_gotoxy(4,1);
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	84 e0       	ldi	r24, 0x04	; 4
 5d0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
	lcd_puts("Magical Days!");
 5d4:	8c e3       	ldi	r24, 0x3C	; 60
 5d6:	91 e0       	ldi	r25, 0x01	; 1
 5d8:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	lcd_gotoxy(1,2);
 5dc:	62 e0       	ldi	r22, 0x02	; 2
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
	lcd_puts("* --> Enter the pin");
 5e4:	8a e4       	ldi	r24, 0x4A	; 74
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	lcd_gotoxy(1,3);
 5ec:	63 e0       	ldi	r22, 0x03	; 3
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
	lcd_puts("# --> Door Bell");
 5f4:	8e e5       	ldi	r24, 0x5E	; 94
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
 5fc:	08 95       	ret

000005fe <main>:
						};

int main(void)
{
	// Initialize the LCD Display
	lcd_init(LCD_DISP_ON);
 5fe:	8c e0       	ldi	r24, 0x0C	; 12
 600:	0e 94 a9 01 	call	0x352	; 0x352 <lcd_init>
	
	// Initialize the Key Pad
	keypad_init();
 604:	0e 94 94 00 	call	0x128	; 0x128 <keypad_init>

	// Configure the Leds as output and set low
	GPIO_config_output(&DDRB, greenLed);
 608:	67 e0       	ldi	r22, 0x07	; 7
 60a:	84 e2       	ldi	r24, 0x24	; 36
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB, redLed);
 612:	66 e0       	ldi	r22, 0x06	; 6
 614:	84 e2       	ldi	r24, 0x24	; 36
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, greenLed);
 61c:	67 e0       	ldi	r22, 0x07	; 7
 61e:	85 e2       	ldi	r24, 0x25	; 37
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	GPIO_write_low(&PORTB, redLed);	
 626:	66 e0       	ldi	r22, 0x06	; 6
 628:	85 e2       	ldi	r24, 0x25	; 37
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Configure the buzzer as output and set low
	GPIO_config_output(&DDRB, Buzzer);
 630:	65 e0       	ldi	r22, 0x05	; 5
 632:	84 e2       	ldi	r24, 0x24	; 36
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, Buzzer);
 63a:	65 e0       	ldi	r22, 0x05	; 5
 63c:	85 e2       	ldi	r24, 0x25	; 37
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Configure the doorbell as output and set low
	GPIO_config_output(&DDRB, doorBell);
 644:	64 e0       	ldi	r22, 0x04	; 4
 646:	84 e2       	ldi	r24, 0x24	; 36
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, doorBell);
 64e:	64 e0       	ldi	r22, 0x04	; 4
 650:	85 e2       	ldi	r24, 0x25	; 37
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Configure Relay as output and set low
	GPIO_config_output(&DDRB, Relay);
 658:	63 e0       	ldi	r22, 0x03	; 3
 65a:	84 e2       	ldi	r24, 0x24	; 36
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_write_low(&PORTB, Relay);	
 662:	63 e0       	ldi	r22, 0x03	; 3
 664:	85 e2       	ldi	r24, 0x25	; 37
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	0e 94 71 00 	call	0xe2	; 0xe2 <GPIO_write_low>
	
	// Set the program to standby state
	standby();
 66c:	0e 94 c3 02 	call	0x586	; 0x586 <standby>
	
    // Configure Timer/Counter0 for scanning the key pad
    // Enable interrupt and set the overflow prescaler to 4ms
    TIM0_overflow_4ms();
 670:	85 b5       	in	r24, 0x25	; 37
 672:	8d 7f       	andi	r24, 0xFD	; 253
 674:	85 bd       	out	0x25, r24	; 37
 676:	85 b5       	in	r24, 0x25	; 37
 678:	84 60       	ori	r24, 0x04	; 4
 67a:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 67c:	ee e6       	ldi	r30, 0x6E	; 110
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	80 81       	ld	r24, Z
 682:	81 60       	ori	r24, 0x01	; 1
 684:	80 83       	st	Z, r24
	
	// Configure Timer/Counter1 for creating delays
	// Enable interrupt and set the overflow prescaler to 1s
	TIM1_overflow_1s();
 686:	e1 e8       	ldi	r30, 0x81	; 129
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	80 81       	ld	r24, Z
 68c:	8c 7f       	andi	r24, 0xFC	; 252
 68e:	80 83       	st	Z, r24
 690:	80 81       	ld	r24, Z
 692:	84 60       	ori	r24, 0x04	; 4
 694:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
 696:	ef e6       	ldi	r30, 0x6F	; 111
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	81 60       	ori	r24, 0x01	; 1
 69e:	80 83       	st	Z, r24
	
	// Configure Timer/Counter2 to control and send PWM signals to buzzers
	// Enable interrupt and set the overflow prescaler to 16ms
	TIM2_overflow_16ms();
 6a0:	e1 eb       	ldi	r30, 0xB1	; 177
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	87 60       	ori	r24, 0x07	; 7
 6a8:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 6aa:	e0 e7       	ldi	r30, 0x70	; 112
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	80 81       	ld	r24, Z
 6b0:	81 60       	ori	r24, 0x01	; 1
 6b2:	80 83       	st	Z, r24
	
    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
 6b4:	89 e0       	ldi	r24, 0x09	; 9
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <uart_init>
	
    // Enables interrupts by setting the global interrupt mask
    sei();
 6bc:	78 94       	sei
 6be:	ff cf       	rjmp	.-2      	; 0x6be <main+0xc0>

000006c0 <ringDoorBell>:
}

void ringDoorBell() 
{
	// Clear the lcd screen
	lcd_clrscr();
 6c0:	0e 94 91 01 	call	0x322	; 0x322 <lcd_clrscr>
	// Print to lcd screen
	lcd_gotoxy(0,2);
 6c4:	62 e0       	ldi	r22, 0x02	; 2
 6c6:	80 e0       	ldi	r24, 0x00	; 0
 6c8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
	lcd_puts("Door bell is ringed");
 6cc:	8e e6       	ldi	r24, 0x6E	; 110
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
 6d4:	08 95       	ret

000006d6 <correctPin>:
}

void correctPin(uint8_t ID)
{	
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	c8 2f       	mov	r28, r24
	// Unlock the door
	GPIO_write_high(&PORTB, Relay);	
 6dc:	63 e0       	ldi	r22, 0x03	; 3
 6de:	85 e2       	ldi	r24, 0x25	; 37
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>

	// Light up the green led
	GPIO_write_high(&PORTB, greenLed);
 6e6:	67 e0       	ldi	r22, 0x07	; 7
 6e8:	85 e2       	ldi	r24, 0x25	; 37
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	
	// Correct Pin Buzzer
	buzzerStage = 2;
 6f0:	82 e0       	ldi	r24, 0x02	; 2
 6f2:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <buzzerStage>
	
	// Clear the lcd screen
	lcd_clrscr();
 6f6:	0e 94 91 01 	call	0x322	; 0x322 <lcd_clrscr>
	// Print to lcd screen
	lcd_gotoxy(0,1);
 6fa:	61 e0       	ldi	r22, 0x01	; 1
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
	lcd_puts("Correct pin.");
 702:	82 e8       	ldi	r24, 0x82	; 130
 704:	91 e0       	ldi	r25, 0x01	; 1
 706:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	lcd_gotoxy(0,2);
 70a:	62 e0       	ldi	r22, 0x02	; 2
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
	lcd_puts("Hello ");
 712:	8f e8       	ldi	r24, 0x8F	; 143
 714:	91 e0       	ldi	r25, 0x01	; 1
 716:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	lcd_puts(names[ID]);
 71a:	8d e0       	ldi	r24, 0x0D	; 13
 71c:	c8 9f       	mul	r28, r24
 71e:	e0 01       	movw	r28, r0
 720:	11 24       	eor	r1, r1
 722:	cc 51       	subi	r28, 0x1C	; 28
 724:	de 4f       	sbci	r29, 0xFE	; 254
 726:	ce 01       	movw	r24, r28
 728:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	
	// UART
	uart_puts(names[ID]);
 72c:	ce 01       	movw	r24, r28
 72e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <uart_puts>
	uart_puts(" entered to the room!");
 732:	86 e9       	ldi	r24, 0x96	; 150
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 1e 05 	call	0xa3c	; 0xa3c <uart_puts>
	uart_puts("\r\n");	
 73a:	8c ea       	ldi	r24, 0xAC	; 172
 73c:	91 e0       	ldi	r25, 0x01	; 1
 73e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <uart_puts>
}
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	08 95       	ret

00000748 <wrongPin>:

void wrongPin()
{
	// Light up the red led
	GPIO_write_high(&PORTB, redLed);
 748:	66 e0       	ldi	r22, 0x06	; 6
 74a:	85 e2       	ldi	r24, 0x25	; 37
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	0e 94 7e 00 	call	0xfc	; 0xfc <GPIO_write_high>
	
	// Clear the lcd screen
	lcd_clrscr();
 752:	0e 94 91 01 	call	0x322	; 0x322 <lcd_clrscr>
	// Print to lcd screen
	lcd_gotoxy(2,2);
 756:	62 e0       	ldi	r22, 0x02	; 2
 758:	82 e0       	ldi	r24, 0x02	; 2
 75a:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
	lcd_puts("Wrong pin.");
 75e:	8f ea       	ldi	r24, 0xAF	; 175
 760:	91 e0       	ldi	r25, 0x01	; 1
 762:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	
	// UART
	uart_puts("Wrong attempt to enter!");
 766:	8a eb       	ldi	r24, 0xBA	; 186
 768:	91 e0       	ldi	r25, 0x01	; 1
 76a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <uart_puts>
	uart_puts("\r\n");
 76e:	8c ea       	ldi	r24, 0xAC	; 172
 770:	91 e0       	ldi	r25, 0x01	; 1
 772:	0e 94 1e 05 	call	0xa3c	; 0xa3c <uart_puts>
 776:	08 95       	ret

00000778 <comparePins>:
}

int8_t comparePins(char input[])
{
 778:	0f 93       	push	r16
 77a:	1f 93       	push	r17
 77c:	cf 93       	push	r28
 77e:	df 93       	push	r29
 780:	ac 01       	movw	r20, r24
	{
		// Compare 4-digit input pin with the registers pin
		// Ex. pi
		for(uint8_t b = 0; b<4; b++)
		{
			if(input[b] == pins[a][b])
 782:	fc 01       	movw	r30, r24
 784:	80 81       	ld	r24, Z
 786:	c8 e1       	ldi	r28, 0x18	; 24
 788:	d2 e0       	ldi	r29, 0x02	; 2
 78a:	08 e2       	ldi	r16, 0x28	; 40
 78c:	12 e0       	ldi	r17, 0x02	; 2
	// pins[0], pins[1], pins[2], pins[3]
	for(uint8_t a = 0; a<4; a++)
	{
		// Compare 4-digit input pin with the registers pin
		// Ex. pi
		for(uint8_t b = 0; b<4; b++)
 78e:	61 e0       	ldi	r22, 0x01	; 1
 790:	0f c0       	rjmp	.+30     	; 0x7b0 <comparePins+0x38>
 792:	92 2f       	mov	r25, r18
		{
			if(input[b] == pins[a][b])
 794:	3d 91       	ld	r19, X+
 796:	21 91       	ld	r18, Z+
 798:	32 13       	cpse	r19, r18
 79a:	06 c0       	rjmp	.+12     	; 0x7a8 <comparePins+0x30>
	// pins[0], pins[1], pins[2], pins[3]
	for(uint8_t a = 0; a<4; a++)
	{
		// Compare 4-digit input pin with the registers pin
		// Ex. pi
		for(uint8_t b = 0; b<4; b++)
 79c:	21 e0       	ldi	r18, 0x01	; 1
 79e:	29 0f       	add	r18, r25
 7a0:	24 30       	cpi	r18, 0x04	; 4
 7a2:	b9 f7       	brne	.-18     	; 0x792 <comparePins+0x1a>
				pinId = -1;
				break;
			}
		}
		// If an active pin is found, stop comparing
		if(pinId != -1)
 7a4:	9f 3f       	cpi	r25, 0xFF	; 255
 7a6:	71 f4       	brne	.+28     	; 0x7c4 <comparePins+0x4c>
 7a8:	24 96       	adiw	r28, 0x04	; 4
{
	int8_t pinId = -1;	// Active pin ID, If -1 no active pins

	// Checking each registered pin
	// pins[0], pins[1], pins[2], pins[3]
	for(uint8_t a = 0; a<4; a++)
 7aa:	c0 17       	cp	r28, r16
 7ac:	d1 07       	cpc	r29, r17
 7ae:	49 f0       	breq	.+18     	; 0x7c2 <comparePins+0x4a>
	{
		// Compare 4-digit input pin with the registers pin
		// Ex. pi
		for(uint8_t b = 0; b<4; b++)
		{
			if(input[b] == pins[a][b])
 7b0:	98 81       	ld	r25, Y
 7b2:	89 13       	cpse	r24, r25
 7b4:	f9 cf       	rjmp	.-14     	; 0x7a8 <comparePins+0x30>
 7b6:	da 01       	movw	r26, r20
 7b8:	11 96       	adiw	r26, 0x01	; 1
 7ba:	fe 01       	movw	r30, r28
 7bc:	31 96       	adiw	r30, 0x01	; 1
	// pins[0], pins[1], pins[2], pins[3]
	for(uint8_t a = 0; a<4; a++)
	{
		// Compare 4-digit input pin with the registers pin
		// Ex. pi
		for(uint8_t b = 0; b<4; b++)
 7be:	96 2f       	mov	r25, r22
 7c0:	e9 cf       	rjmp	.-46     	; 0x794 <comparePins+0x1c>
 7c2:	9f ef       	ldi	r25, 0xFF	; 255
		if(pinId != -1)
		break;
	}
	
	return pinId;
 7c4:	89 2f       	mov	r24, r25
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	1f 91       	pop	r17
 7cc:	0f 91       	pop	r16
 7ce:	08 95       	ret

000007d0 <__vector_16>:
}

/* Interrupt handlers ------------------------------------------------*/
//	Interrupt Handler for scanning keypad, getting the typed pin and then compare the pin
ISR(TIMER0_OVF_vect)
{
 7d0:	1f 92       	push	r1
 7d2:	0f 92       	push	r0
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	0f 92       	push	r0
 7d8:	11 24       	eor	r1, r1
 7da:	2f 93       	push	r18
 7dc:	3f 93       	push	r19
 7de:	4f 93       	push	r20
 7e0:	5f 93       	push	r21
 7e2:	6f 93       	push	r22
 7e4:	7f 93       	push	r23
 7e6:	8f 93       	push	r24
 7e8:	9f 93       	push	r25
 7ea:	af 93       	push	r26
 7ec:	bf 93       	push	r27
 7ee:	ef 93       	push	r30
 7f0:	ff 93       	push	r31
	volatile static char pressedKey = ' ';		// Pressed Key
	volatile static uint8_t pinDigitCnt = 0;	// Contains the index value of the pin
	volatile static uint8_t scanningStage = 0;	// Get Pin --> 0: None, 1: getPin, 2: Standby
	
	// Scan the Keypad
	pressedKey = keypad_scan();
 7f2:	0e 94 c7 00 	call	0x18e	; 0x18e <keypad_scan>
 7f6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <pressedKey.2005>
	
	// Key Press Buzzer
	if(pressedKey != ' ')
 7fa:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 7fe:	80 32       	cpi	r24, 0x20	; 32
 800:	19 f0       	breq	.+6      	; 0x808 <__vector_16+0x38>
		buzzerStage = 1;
 802:	81 e0       	ldi	r24, 0x01	; 1
 804:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <buzzerStage>
	
	// If user pressed #
	if(pressedKey == '#' && scanningStage == 0)
 808:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 80c:	83 32       	cpi	r24, 0x23	; 35
 80e:	61 f4       	brne	.+24     	; 0x828 <__vector_16+0x58>
 810:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <scanningStage.2007>
 814:	81 11       	cpse	r24, r1
 816:	08 c0       	rjmp	.+16     	; 0x828 <__vector_16+0x58>
	{
		ringDoorBell();
 818:	0e 94 60 03 	call	0x6c0	; 0x6c0 <ringDoorBell>
		// Wait 3s and than standby
		scanningStage = 2;
 81c:	82 e0       	ldi	r24, 0x02	; 2
 81e:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <scanningStage.2007>
		timerStage = 2;
 822:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <timerStage>
 826:	19 c0       	rjmp	.+50     	; 0x85a <__vector_16+0x8a>
	}
	//If user pressed *
	else if(pressedKey == '*' && scanningStage == 0)
 828:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 82c:	8a 32       	cpi	r24, 0x2A	; 42
 82e:	a9 f4       	brne	.+42     	; 0x85a <__vector_16+0x8a>
 830:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <scanningStage.2007>
 834:	81 11       	cpse	r24, r1
 836:	11 c0       	rjmp	.+34     	; 0x85a <__vector_16+0x8a>
	{
		scanningStage = 1;			// Enable getPin
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <scanningStage.2007>
		timerStage = 1;		// Start 5 second timer
 83e:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <timerStage>
		pinDigitCnt = 0;	// Set pin input index to 0
 842:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <pinDigitCnt.2006>
						
		// Configure lcd
		lcd_clrscr();
 846:	0e 94 91 01 	call	0x322	; 0x322 <lcd_clrscr>
		lcd_gotoxy(2,1);
 84a:	61 e0       	ldi	r22, 0x01	; 1
 84c:	82 e0       	ldi	r24, 0x02	; 2
 84e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
		lcd_puts("--Enter the pin--");
 852:	82 ed       	ldi	r24, 0xD2	; 210
 854:	91 e0       	ldi	r25, 0x01	; 1
 856:	0e 94 99 01 	call	0x332	; 0x332 <lcd_puts>
	}
		
	// If getPin enabled get the typed pin
	if(scanningStage == 1)
 85a:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <scanningStage.2007>
 85e:	81 30       	cpi	r24, 0x01	; 1
 860:	09 f0       	breq	.+2      	; 0x864 <__vector_16+0x94>
 862:	46 c0       	rjmp	.+140    	; 0x8f0 <__vector_16+0x120>
	{
		// Scan the entered pin
		if(pressedKey != '*' && pressedKey != '#' && pressedKey!= ' ')
 864:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 868:	8a 32       	cpi	r24, 0x2A	; 42
 86a:	f9 f0       	breq	.+62     	; 0x8aa <__vector_16+0xda>
 86c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 870:	83 32       	cpi	r24, 0x23	; 35
 872:	d9 f0       	breq	.+54     	; 0x8aa <__vector_16+0xda>
 874:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 878:	80 32       	cpi	r24, 0x20	; 32
 87a:	b9 f0       	breq	.+46     	; 0x8aa <__vector_16+0xda>
		{
			// Put the pressed key into inputPin var
			inPin[pinDigitCnt] = pressedKey;
 87c:	e0 91 2a 02 	lds	r30, 0x022A	; 0x80022a <pinDigitCnt.2006>
 880:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	eb 5e       	subi	r30, 0xEB	; 235
 888:	fe 4f       	sbci	r31, 0xFE	; 254
 88a:	80 83       	st	Z, r24
				
			// Configure lcd
			lcd_gotoxy((pinDigitCnt + 8),2);
 88c:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <pinDigitCnt.2006>
 890:	62 e0       	ldi	r22, 0x02	; 2
 892:	88 5f       	subi	r24, 0xF8	; 248
 894:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <lcd_gotoxy>
			lcd_putc(pressedKey);
 898:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pressedKey.2005>
 89c:	0e 94 95 01 	call	0x32a	; 0x32a <lcd_putc>
				
			// Increase the counter
			pinDigitCnt++;
 8a0:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <pinDigitCnt.2006>
 8a4:	8f 5f       	subi	r24, 0xFF	; 255
 8a6:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <pinDigitCnt.2006>
		}
		
		// If 5s is up or the user typed all the digits of the pin enter here
		// and compare typed pin with the correct ones
		if(timerStage == 0 || pinDigitCnt > 3)
 8aa:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <timerStage>
 8ae:	88 23       	and	r24, r24
 8b0:	21 f0       	breq	.+8      	; 0x8ba <__vector_16+0xea>
 8b2:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <pinDigitCnt.2006>
 8b6:	84 30       	cpi	r24, 0x04	; 4
 8b8:	40 f1       	brcs	.+80     	; 0x90a <__stack+0xb>
		{	
			// Compare the typed pin and the correct pins
			inID = comparePins(inPin);
 8ba:	85 e1       	ldi	r24, 0x15	; 21
 8bc:	91 e0       	ldi	r25, 0x01	; 1
 8be:	0e 94 bc 03 	call	0x778	; 0x778 <comparePins>
 8c2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <inID>
			
			// If user typed pin before the timer finish stop the timer			
			timerStage = 0;
 8c6:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <timerStage>
			timerCnt = 0;
 8ca:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <timerCnt>
			
			// Typed pin is incorrect
			if(inID == -1)
 8ce:	8f 3f       	cpi	r24, 0xFF	; 255
 8d0:	19 f4       	brne	.+6      	; 0x8d8 <__vector_16+0x108>
			{
				wrongPin();
 8d2:	0e 94 a4 03 	call	0x748	; 0x748 <wrongPin>
 8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__vector_16+0x110>
			}
			else if(inID >= 0 && inID < 4)
 8d8:	84 30       	cpi	r24, 0x04	; 4
 8da:	10 f4       	brcc	.+4      	; 0x8e0 <__vector_16+0x110>
			{
				correctPin(inID);
 8dc:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <correctPin>
			}
			
			pinDigitCnt = 0;
 8e0:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <pinDigitCnt.2006>
			scanningStage = 2;
 8e4:	82 e0       	ldi	r24, 0x02	; 2
 8e6:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <scanningStage.2007>
			timerStage = 2;
 8ea:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <timerStage>
 8ee:	0d c0       	rjmp	.+26     	; 0x90a <__stack+0xb>
		}
	}
	
	// Changing the status to the standby
	if(scanningStage == 2)
 8f0:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <scanningStage.2007>
 8f4:	82 30       	cpi	r24, 0x02	; 2
 8f6:	59 f4       	brne	.+22     	; 0x90e <__stack+0xf>
	{
		if(timerStage == 0)
 8f8:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <timerStage>
 8fc:	81 11       	cpse	r24, r1
 8fe:	07 c0       	rjmp	.+14     	; 0x90e <__stack+0xf>
		{
			scanningStage = 0;
 900:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <scanningStage.2007>
			standby();
 904:	0e 94 c3 02 	call	0x586	; 0x586 <standby>
		}
	}
}
 908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xf>
			timerStage = 2;
		}
	}
	
	// Changing the status to the standby
	if(scanningStage == 2)
 90a:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <scanningStage.2007>
		{
			scanningStage = 0;
			standby();
		}
	}
}
 90e:	ff 91       	pop	r31
 910:	ef 91       	pop	r30
 912:	bf 91       	pop	r27
 914:	af 91       	pop	r26
 916:	9f 91       	pop	r25
 918:	8f 91       	pop	r24
 91a:	7f 91       	pop	r23
 91c:	6f 91       	pop	r22
 91e:	5f 91       	pop	r21
 920:	4f 91       	pop	r20
 922:	3f 91       	pop	r19
 924:	2f 91       	pop	r18
 926:	0f 90       	pop	r0
 928:	0f be       	out	0x3f, r0	; 63
 92a:	0f 90       	pop	r0
 92c:	1f 90       	pop	r1
 92e:	18 95       	reti

00000930 <__vector_18>:
 930:	1f 92       	push	r1
 932:	0f 92       	push	r0
 934:	0f b6       	in	r0, 0x3f	; 63
 936:	0f 92       	push	r0
 938:	11 24       	eor	r1, r1
 93a:	2f 93       	push	r18
 93c:	8f 93       	push	r24
 93e:	9f 93       	push	r25
 940:	ef 93       	push	r30
 942:	ff 93       	push	r31
 944:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 948:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 94c:	8c 71       	andi	r24, 0x1C	; 28
 94e:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <UART_RxHead>
 952:	ef 5f       	subi	r30, 0xFF	; 255
 954:	ef 73       	andi	r30, 0x3F	; 63
 956:	90 91 30 02 	lds	r25, 0x0230	; 0x800230 <UART_RxTail>
 95a:	e9 17       	cp	r30, r25
 95c:	39 f0       	breq	.+14     	; 0x96c <__vector_18+0x3c>
 95e:	e0 93 31 02 	sts	0x0231, r30	; 0x800231 <UART_RxHead>
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	ec 5c       	subi	r30, 0xCC	; 204
 966:	fd 4f       	sbci	r31, 0xFD	; 253
 968:	20 83       	st	Z, r18
 96a:	01 c0       	rjmp	.+2      	; 0x96e <__vector_18+0x3e>
 96c:	82 e0       	ldi	r24, 0x02	; 2
 96e:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <UART_LastRxError>
 972:	89 2b       	or	r24, r25
 974:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <UART_LastRxError>
 978:	ff 91       	pop	r31
 97a:	ef 91       	pop	r30
 97c:	9f 91       	pop	r25
 97e:	8f 91       	pop	r24
 980:	2f 91       	pop	r18
 982:	0f 90       	pop	r0
 984:	0f be       	out	0x3f, r0	; 63
 986:	0f 90       	pop	r0
 988:	1f 90       	pop	r1
 98a:	18 95       	reti

0000098c <__vector_19>:
 98c:	1f 92       	push	r1
 98e:	0f 92       	push	r0
 990:	0f b6       	in	r0, 0x3f	; 63
 992:	0f 92       	push	r0
 994:	11 24       	eor	r1, r1
 996:	8f 93       	push	r24
 998:	9f 93       	push	r25
 99a:	ef 93       	push	r30
 99c:	ff 93       	push	r31
 99e:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <UART_TxHead>
 9a2:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <UART_TxTail>
 9a6:	98 17       	cp	r25, r24
 9a8:	69 f0       	breq	.+26     	; 0x9c4 <__vector_19+0x38>
 9aa:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <UART_TxTail>
 9ae:	ef 5f       	subi	r30, 0xFF	; 255
 9b0:	ef 73       	andi	r30, 0x3F	; 63
 9b2:	e0 93 32 02 	sts	0x0232, r30	; 0x800232 <UART_TxTail>
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	ec 58       	subi	r30, 0x8C	; 140
 9ba:	fd 4f       	sbci	r31, 0xFD	; 253
 9bc:	80 81       	ld	r24, Z
 9be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 9c2:	05 c0       	rjmp	.+10     	; 0x9ce <__vector_19+0x42>
 9c4:	e1 ec       	ldi	r30, 0xC1	; 193
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	80 81       	ld	r24, Z
 9ca:	8f 7d       	andi	r24, 0xDF	; 223
 9cc:	80 83       	st	Z, r24
 9ce:	ff 91       	pop	r31
 9d0:	ef 91       	pop	r30
 9d2:	9f 91       	pop	r25
 9d4:	8f 91       	pop	r24
 9d6:	0f 90       	pop	r0
 9d8:	0f be       	out	0x3f, r0	; 63
 9da:	0f 90       	pop	r0
 9dc:	1f 90       	pop	r1
 9de:	18 95       	reti

000009e0 <uart_init>:
 9e0:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <UART_TxHead>
 9e4:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <UART_TxTail>
 9e8:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <UART_RxHead>
 9ec:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <UART_RxTail>
 9f0:	99 23       	and	r25, r25
 9f2:	1c f4       	brge	.+6      	; 0x9fa <uart_init+0x1a>
 9f4:	22 e0       	ldi	r18, 0x02	; 2
 9f6:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 9fa:	90 78       	andi	r25, 0x80	; 128
 9fc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 a00:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 a04:	88 e9       	ldi	r24, 0x98	; 152
 a06:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 a0a:	86 e0       	ldi	r24, 0x06	; 6
 a0c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 a10:	08 95       	ret

00000a12 <uart_putc>:
 a12:	20 91 33 02 	lds	r18, 0x0233	; 0x800233 <UART_TxHead>
 a16:	2f 5f       	subi	r18, 0xFF	; 255
 a18:	2f 73       	andi	r18, 0x3F	; 63
 a1a:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <UART_TxTail>
 a1e:	29 17       	cp	r18, r25
 a20:	e1 f3       	breq	.-8      	; 0xa1a <uart_putc+0x8>
 a22:	e2 2f       	mov	r30, r18
 a24:	f0 e0       	ldi	r31, 0x00	; 0
 a26:	ec 58       	subi	r30, 0x8C	; 140
 a28:	fd 4f       	sbci	r31, 0xFD	; 253
 a2a:	80 83       	st	Z, r24
 a2c:	20 93 33 02 	sts	0x0233, r18	; 0x800233 <UART_TxHead>
 a30:	e1 ec       	ldi	r30, 0xC1	; 193
 a32:	f0 e0       	ldi	r31, 0x00	; 0
 a34:	80 81       	ld	r24, Z
 a36:	80 62       	ori	r24, 0x20	; 32
 a38:	80 83       	st	Z, r24
 a3a:	08 95       	ret

00000a3c <uart_puts>:
 a3c:	cf 93       	push	r28
 a3e:	df 93       	push	r29
 a40:	ec 01       	movw	r28, r24
 a42:	88 81       	ld	r24, Y
 a44:	88 23       	and	r24, r24
 a46:	31 f0       	breq	.+12     	; 0xa54 <uart_puts+0x18>
 a48:	21 96       	adiw	r28, 0x01	; 1
 a4a:	0e 94 09 05 	call	0xa12	; 0xa12 <uart_putc>
 a4e:	89 91       	ld	r24, Y+
 a50:	81 11       	cpse	r24, r1
 a52:	fb cf       	rjmp	.-10     	; 0xa4a <uart_puts+0xe>
 a54:	df 91       	pop	r29
 a56:	cf 91       	pop	r28
 a58:	08 95       	ret

00000a5a <__itoa_ncheck>:
 a5a:	bb 27       	eor	r27, r27
 a5c:	4a 30       	cpi	r20, 0x0A	; 10
 a5e:	31 f4       	brne	.+12     	; 0xa6c <__itoa_ncheck+0x12>
 a60:	99 23       	and	r25, r25
 a62:	22 f4       	brpl	.+8      	; 0xa6c <__itoa_ncheck+0x12>
 a64:	bd e2       	ldi	r27, 0x2D	; 45
 a66:	90 95       	com	r25
 a68:	81 95       	neg	r24
 a6a:	9f 4f       	sbci	r25, 0xFF	; 255
 a6c:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__utoa_common>

00000a70 <__utoa_ncheck>:
 a70:	bb 27       	eor	r27, r27

00000a72 <__utoa_common>:
 a72:	fb 01       	movw	r30, r22
 a74:	55 27       	eor	r21, r21
 a76:	aa 27       	eor	r26, r26
 a78:	88 0f       	add	r24, r24
 a7a:	99 1f       	adc	r25, r25
 a7c:	aa 1f       	adc	r26, r26
 a7e:	a4 17       	cp	r26, r20
 a80:	10 f0       	brcs	.+4      	; 0xa86 <__utoa_common+0x14>
 a82:	a4 1b       	sub	r26, r20
 a84:	83 95       	inc	r24
 a86:	50 51       	subi	r21, 0x10	; 16
 a88:	b9 f7       	brne	.-18     	; 0xa78 <__utoa_common+0x6>
 a8a:	a0 5d       	subi	r26, 0xD0	; 208
 a8c:	aa 33       	cpi	r26, 0x3A	; 58
 a8e:	08 f0       	brcs	.+2      	; 0xa92 <__utoa_common+0x20>
 a90:	a9 5d       	subi	r26, 0xD9	; 217
 a92:	a1 93       	st	Z+, r26
 a94:	00 97       	sbiw	r24, 0x00	; 0
 a96:	79 f7       	brne	.-34     	; 0xa76 <__utoa_common+0x4>
 a98:	b1 11       	cpse	r27, r1
 a9a:	b1 93       	st	Z+, r27
 a9c:	11 92       	st	Z+, r1
 a9e:	cb 01       	movw	r24, r22
 aa0:	0c 94 52 05 	jmp	0xaa4	; 0xaa4 <strrev>

00000aa4 <strrev>:
 aa4:	dc 01       	movw	r26, r24
 aa6:	fc 01       	movw	r30, r24
 aa8:	67 2f       	mov	r22, r23
 aaa:	71 91       	ld	r23, Z+
 aac:	77 23       	and	r23, r23
 aae:	e1 f7       	brne	.-8      	; 0xaa8 <strrev+0x4>
 ab0:	32 97       	sbiw	r30, 0x02	; 2
 ab2:	04 c0       	rjmp	.+8      	; 0xabc <strrev+0x18>
 ab4:	7c 91       	ld	r23, X
 ab6:	6d 93       	st	X+, r22
 ab8:	70 83       	st	Z, r23
 aba:	62 91       	ld	r22, -Z
 abc:	ae 17       	cp	r26, r30
 abe:	bf 07       	cpc	r27, r31
 ac0:	c8 f3       	brcs	.-14     	; 0xab4 <strrev+0x10>
 ac2:	08 95       	ret

00000ac4 <_exit>:
 ac4:	f8 94       	cli

00000ac6 <__stop_program>:
 ac6:	ff cf       	rjmp	.-2      	; 0xac6 <__stop_program>
